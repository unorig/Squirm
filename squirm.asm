

; # Known game addresses out of memory block
IRQExecAddr1 = $0314
IRQExecAddr2 = $0315
BorderColour = $D020
BackgroundColour = $D021
SpriteEnableRegister = $D015
Sprite0Colour = $D027
Sprite1Colour = $D028
SpriteDoubleHeight = $D017
PortADSerialBus = $DD00
Sprite0_X = $D000
Sprite1_X = $D002
Sprite0_Y = $D001
Sprite1_Y = $D003
SpriteDoubleWidth = $D01D
SpriteMulticolor = $D01C
Sprite_upper_X = $D010
ScreenControlRegister = $D011
ExtraSpriteColor2 = $D026
Sprite2_X = $D004
SpritePriority = $D01B
IRQControlRegister = $D01A
Sprite2_Y = $D005
Sprite2Colour = $D029
Sprite3Colour = $D02A
Sprite4Colour = $D02B
Sprite5Colour = $D02C
Sprite6Colour = $D02D
Sprite7Colour = $D02E
ScreenControl = $D016
VIC2MemSetup = $D018
CurrentRasterLine = $D012
KeyJoy2_DataDirection = $DD02
FilterCutOff1 = $D415
FilterCutOff2 = $D416
FilterControl = $D417
Sprite7_Y = $D00F
ExtraSpriteColor1 = $D025
Sprite7_X = $D00E
SpriteSpriteCollision = $D01F
KeyJoy1 = $DC01
KeyJoy2 = $DC00
Voice1Frequency1 = $D400
Voice1Frequency2 = $D401
Voice1PulseWidth1 = $D402
Voice1PulseWidth2 = $D403
Voice1Control = $D404
Voice1AttackDecayLength = $D405
Voice1SustainVolRelease = $D406
Voice2Control1 = $D407
Voice2Control2 = $D408
Voice2PulseWidth1 = $D409
Voice2PulseWidth2 = $D40A
Voice2Control = $D40B
Voice2AttackDecayLength = $D40C
Voice2SustainVolRelease = $D40D
Voice3Frequency1 = $D40E
Voice3Control = $D412
ExtraBackgroundColor3 = $D024
Voice3AttackDecayLength = $D413
Voice3SustainVolRelease = $D414
Voice3Frequency2 = $D40F
ExtraBackgroundColor1 = $D022
ExtraBackgroundColor2 = $D023
SpritePointer0 = $07F8
SpritePointer1 = $07F9
SpritePointers = $07Fa


* = $0801

	.byte $0C,$08,$0A,$00,$9E,$31,$35,$31,$33,$33,$00,$00,$00,$35,$31,$33,$33,$00,$00,$00,$22,$13,$11,$11,$11,$22,$3B,$41,$3A,$85,$22,$13
	.byte $22,$3B,$42,$3A,$97,$41,$2C,$42,$3A,$82,$00,$00,$00,$41,$00,$8E,$79,$28,$00,$00,$42,$00,$81,$00,$00,$00,$00,$4E,$20,$32,$2E,$30
	.byte $33,$2F,$30,$36,$2D,$30,$37,$2D,$38,$33,$00,$83,$08,$0F,$00,$56,$43,$B2,$35,$33,$32,$38,$30,$3A,$97,$31,$30,$32,$30,$2C,$C2,$28
	.byte $56,$43,$29,$3A,$97,$56,$43,$2C,$31,$35,$3A,$97,$31,$30,$32,$31,$2C,$C2,$28,$56,$43,$AA,$31,$29,$3A,$97,$56,$43,$AA,$31,$2C,$31
	.byte $35,$00,$B2,$08,$14,$00,$97,$31,$30,$32,$32,$2C,$C2,$28,$36,$34,$36,$29,$3A,$9E,$35,$32,$34,$32,$31,$3A,$99,$22,$93,$08,$22,$3B
	.byte $3A,$9E,$35,$32,$32,$38,$32,$3A,$97,$35,$32,$32,$38,$33,$2C,$36,$00,$DB,$08,$19,$00,$99,$22,$11,$11,$11,$11,$11,$11,$22,$A3,$31
	.byte $31,$29,$22,$1C,$12,$8E,$20,$43,$42,$4D,$20,$36,$34,$20,$41,$53,$53,$45,$4D,$42,$4C,$45,$52,$20,$22,$00,$EB,$08,$1E,$00,$81,$58
	.byte $B2,$31,$A4,$32,$30,$30,$3A,$82,$58,$00,$13,$09,$23,$00,$99,$22,$11,$11,$11,$11,$1D,$96,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$43,$4F,$50,$59,$52,$49,$47,$48,$54,$20,$31,$39,$38,$33,$22,$00,$28,$09,$28,$00,$99,$22,$1D,$96,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$D5,$C0,$C9,$22,$00,$4B,$09,$2D,$00,$99,$22,$1D,$96,$20,$20,$20,$20,$20,$20,$20,$20,$DD,$43,$DD,$1C,$20,$20,$20,$44,$45
	.byte $52,$45,$4B,$20,$42,$55,$53,$48,$22,$00,$61,$09,$32,$00,$99,$22,$1D,$96,$20,$20,$20,$20,$20,$20,$20,$20,$CA,$C0,$CB,$1C,$22,$00
	.byte $84,$09,$37,$00,$99,$A3,$31,$39,$29,$22,$26,$11,$22,$3A,$99,$A3,$31,$34,$29,$22,$50,$45,$54,$45,$52,$20,$48,$4F,$4C,$4D,$45,$53
	.byte $1F,$22,$00,$9F,$09,$3C,$00,$81,$58,$B2,$31,$A4,$31,$30,$30,$30,$3A,$82,$58,$3A,$97,$35,$33,$32,$38,$30,$2C,$31,$34,$00,$AF,$09
	.byte $41,$00,$81,$58,$B2,$31,$A4,$35,$30,$30,$3A,$82,$58,$00,$BD,$09,$46,$00,$9C,$3A,$86,$58,$24,$28,$32,$35,$29,$00,$CF,$09,$4B,$00
	.byte $86,$46,$24,$28,$32,$30,$29,$2C,$46,$28,$32,$30,$29,$00,$E8,$09,$50,$00,$86,$4B,$24,$28,$32,$30,$29,$2C,$4B,$28,$32,$30,$29,$2C
	.byte $4B,$31,$28,$32,$30,$29,$00,$01,$0A,$55,$00,$86,$4D,$24,$28,$31,$30,$29,$2C,$4D,$28,$31,$30,$29,$2C,$4D,$31,$28,$31,$30,$29,$00
	.byte $36,$0A,$5A,$00,$44,$24,$B2,$22,$30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$41,$42,$43,$44,$45,$46,$22,$3A,$54,$35,$24,$B2,$22,$1D
	.byte $1D,$1D,$1D,$1D,$22,$3A,$53,$38,$24,$B2,$22,$20,$20,$20,$20,$20,$20,$20,$20,$22,$00,$60,$0A,$5F,$00,$99,$22,$93,$11,$22,$3A,$97
	.byte $35,$32,$32,$38,$33,$2C,$36,$3A,$9E,$35,$32,$32,$38,$32,$3A,$99,$A3,$31,$37,$29,$22,$1C,$0E,$A2,$A2,$A2,$A2,$A2,$A2,$22,$00,$73
	.byte $0A,$64,$00,$99,$A3,$31,$37,$29,$22,$12,$20,$CD,$45,$4E,$55,$20,$22,$00,$8C,$0A,$69,$00,$99,$A3,$31,$37,$29,$22,$B7,$B7,$B7,$B7
	.byte $B7,$B7,$1F,$22,$3A,$99,$22,$11,$11,$22,$00,$AE,$0A,$6E,$00,$99,$A3,$39,$29,$3B,$22,$C5,$4E,$54,$45,$52,$20,$50,$52,$4F,$47,$52
	.byte $41,$4D,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$C5,$11,$22,$00,$D0,$0A,$73,$00,$99,$A3,$39,$29,$3B,$22,$CC,$49,$53,$54,$20,$50,$52,$4F,$47
	.byte $52,$41,$4D,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$CC,$11,$22,$00,$F2,$0A,$78,$00,$99,$A3,$39,$29,$3B,$22,$D2,$55,$4E,$20,$50,$52,$4F
	.byte $47,$52,$41,$4D,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$D2,$11,$22,$00,$14,$0B,$7D,$00,$99,$A3,$39,$29,$3B,$22,$CF,$54,$48,$45,$52
	.byte $20,$46,$55,$4E,$43,$54,$49,$4F,$4E,$53,$2E,$2E,$2E,$2E,$2E,$CF,$11,$22,$00,$37,$0B,$82,$00,$99,$A3,$39,$29,$3B,$22,$45,$D8,$49
	.byte $54,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$2E,$D8,$11,$11,$22,$00,$5D,$0B,$87,$00,$99,$A3,$37,$29,$3B,$22
	.byte $11,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$A2,$22,$00,$83,$0B,$8C,$00
	.byte $99,$A3,$37,$29,$3B,$22,$12,$20,$D4,$59,$50,$45,$20,$49,$4E,$20,$43,$48,$4F,$49,$43,$45,$20,$52,$45,$51,$55,$49,$52,$45,$44,$20
	.byte $22,$00,$A8,$0B,$91,$00,$99,$A3,$37,$29,$3B,$22,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7,$B7
	.byte $B7,$B7,$B7,$B7,$B7,$22,$00,$CA,$0B,$96,$00,$97,$31,$39,$38,$2C,$30,$3A,$8F,$20,$43,$4C,$45,$41,$52,$20,$4B,$2F,$42,$4F,$41,$52
	.byte $44,$20,$42,$55,$46,$46,$45,$52,$00,$D4,$0B,$A0,$00,$8D,$31,$31,$34,$35,$00,$E9,$0B,$A5,$00,$8B,$5A,$24,$B2,$22,$45,$22,$A7,$8D
	.byte $32,$31,$30,$3A,$89,$39,$35,$00,$FE,$0B,$AA,$00,$8B,$5A,$24,$B2,$22,$4C,$22,$A7,$8D,$33,$33,$35,$3A,$89,$39,$35,$00,$14,$0C,$AF
	.byte $00,$8B,$5A,$24,$B2,$22,$52,$22,$A7,$8D,$34,$37,$30,$3A,$89,$31,$39,$35,$00,$29,$0C,$B4,$00,$8B,$5A,$24,$B2,$22,$4F,$22,$A7,$8D
	.byte $37,$36,$30,$3A,$89,$39,$35,$00,$3A,$0C,$B9,$00,$8B,$5A,$24,$B3,$B1,$22,$58,$22,$A7,$31,$36,$30,$00,$73,$0C,$BE,$00,$56,$B2,$35
	.byte $33,$32,$38,$30,$3A,$97,$56,$2C,$C2,$28,$31,$30,$32,$30,$29,$3A,$97,$56,$AA,$31,$2C,$C2,$28,$31,$30,$32,$31,$29,$3A,$97,$36,$34
	.byte $36,$2C,$C2,$28,$31,$30,$32,$32,$29,$3A,$99,$22,$93,$09,$22,$3A,$80,$00,$80,$0C,$C3,$00,$8D,$32,$30,$30,$3A,$89,$39,$35,$00,$BF
	.byte $0C,$C8,$00,$99,$22,$13,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$11,$1D,$1D,$1D,$1D,$1D,$1D
	.byte $12,$20,$50,$52,$45,$53,$53,$20,$41,$4E,$59,$20,$4B,$45,$59,$20,$54,$4F,$20,$43,$4F,$4E,$54,$49,$4E,$55,$45,$20,$22,$00,$CB,$0C
	.byte $CD,$00,$8D,$31,$31,$34,$35,$3A,$8E,$00,$FC,$0C,$D2,$00,$99,$22,$93,$11,$8E,$20,$45,$4E,$54,$45,$52,$20,$41,$53,$53,$45,$4D,$42
	.byte $4C,$59,$20,$4C,$41,$4E,$47,$55,$41,$47,$45,$20,$50,$52,$4F,$47,$52,$41,$4D,$20,$4E,$4F,$57,$2E,$11,$22,$00,$2B,$0D,$D7,$00,$99
	.byte $22,$20,$53,$54,$41,$52,$54,$20,$41,$44,$44,$52,$45,$53,$53,$22,$3B,$3A,$8D,$31,$31,$36,$30,$3A,$4C,$B2,$43,$3A,$8B,$49,$56,$25
	.byte $B0,$48,$4C,$B3,$31,$A7,$32,$31,$30,$00,$4D,$0D,$DC,$00,$85,$58,$24,$3A,$9E,$35,$32,$31,$31,$33,$2C,$58,$24,$2C,$4C,$42,$24,$2C
	.byte $4F,$43,$24,$2C,$41,$44,$24,$2C,$49,$56,$25,$00,$5C,$0D,$E1,$00,$8B,$49,$56,$25,$B2,$30,$A7,$32,$33,$35,$00,$A4,$0D,$E6,$00,$99
	.byte $22,$1C,$20,$2A,$45,$58,$54,$52,$41,$20,$53,$50,$41,$43,$45,$53,$20,$4F,$52,$20,$4D,$49,$53,$53,$49,$4E,$47,$20,$4C,$41,$42,$45
	.byte $4C,$20,$4F,$52,$20,$4D,$41,$43,$52,$4F,$20,$20,$46,$4C,$41,$47,$20,$49,$4E,$44,$49,$43,$41,$54,$4F,$52,$2A,$1F,$22,$3A,$89,$32
	.byte $32,$30,$00,$B7,$0D,$EB,$00,$8B,$4F,$43,$24,$B2,$22,$45,$4E,$44,$22,$A7,$36,$39,$30,$00,$C8,$0D,$F0,$00,$8B,$4C,$42,$24,$B3,$B1
	.byte $22,$22,$A7,$34,$38,$30,$00,$E5,$0D,$F5,$00,$8B,$41,$44,$24,$B2,$22,$22,$B0,$C8,$28,$41,$44,$24,$2C,$31,$29,$B1,$22,$41,$22,$A7
	.byte $32,$36,$30,$00,$00,$0E,$FA,$00,$48,$49,$24,$B2,$41,$44,$24,$3A,$8D,$31,$31,$36,$35,$3A,$8B,$49,$56,$25,$A7,$32,$32,$30,$00,$09
	.byte $0E,$FF,$00,$41,$44,$B2,$43,$00,$20,$0E,$04,$01,$9E,$35,$31,$39,$37,$32,$2C,$4F,$43,$24,$2C,$4F,$43,$25,$2C,$42,$43,$25,$00,$50
	.byte $0E,$09,$01,$8B,$42,$43,$25,$B2,$32,$35,$35,$A7,$99,$22,$1C,$20,$2A,$55,$4E,$52,$45,$43,$4F,$47,$4E,$49,$53,$45,$44,$20,$20,$4F
	.byte $50,$2D,$43,$4F,$44,$45,$2A,$1F,$22,$3A,$89,$32,$32,$30,$00,$5F,$0E,$0E,$01,$8B,$42,$43,$25,$B2,$30,$A7,$32,$38,$35,$00,$88,$0E
	.byte $13,$01,$8B,$41,$44,$24,$B2,$22,$22,$A7,$99,$22,$1C,$20,$2A,$4D,$49,$53,$53,$49,$4E,$47,$20,$4F,$50,$45,$52,$41,$4E,$44,$2A,$1F
	.byte $22,$3A,$89,$32,$32,$30,$00,$A1,$0E,$18,$01,$8B,$C8,$28,$41,$44,$24,$2C,$31,$29,$20,$B1,$B2,$22,$41,$22,$A7,$8D,$36,$37,$30,$00
	.byte $AF,$0E,$1D,$01,$8D,$32,$39,$30,$3A,$89,$32,$32,$30,$00,$BD,$0E,$22,$01,$8B,$41,$44,$B3,$30,$A7,$33,$32,$30,$00,$C8,$0E,$27,$01
	.byte $97,$4C,$2C,$4F,$43,$25,$00,$E6,$0E,$2C,$01,$41,$32,$25,$B2,$41,$44,$AD,$32,$35,$36,$3A,$41,$31,$25,$B2,$41,$44,$AB,$32,$35,$36
	.byte $AC,$41,$32,$25,$00,$FD,$0E,$31,$01,$91,$42,$43,$25,$AA,$31,$89,$33,$33,$30,$2C,$33,$31,$35,$2C,$33,$31,$30,$00,$0F,$0F,$36,$01
	.byte $97,$4C,$AA,$32,$2C,$41,$32,$25,$3A,$89,$33,$32,$35,$00,$1F,$0F,$3B,$01,$8B,$41,$44,$B3,$32,$35,$36,$A7,$33,$32,$35,$00,$3D,$0F
	.byte $40,$01,$99,$22,$1C,$20,$2A,$49,$4E,$56,$41,$4C,$49,$44,$20,$41,$44,$44,$52,$45,$53,$53,$2A,$1F,$22,$3A,$8E,$00,$4A,$0F,$45,$01
	.byte $97,$4C,$AA,$31,$2C,$41,$31,$25,$00,$5A,$0F,$4A,$01,$4C,$B2,$4C,$AA,$42,$43,$25,$AA,$31,$3A,$8E,$00,$65,$0F,$4F,$01,$99,$22,$93
	.byte $0E,$11,$22,$00,$A1,$0F,$54,$01,$99,$22,$1D,$20,$20,$20,$C5,$4E,$54,$45,$52,$20,$D3,$54,$41,$52,$54,$20,$C1,$44,$44,$52,$45,$53
	.byte $53,$22,$3B,$3A,$8D,$31,$31,$36,$30,$3A,$4C,$B2,$43,$3A,$59,$B2,$30,$3A,$8B,$49,$56,$25,$B0,$48,$4C,$B3,$31,$A7,$33,$33,$35

l_0FA0

	.byte $A0,$88,$89,$A0

l_0FA4

	.byte $B0,$B0,$B0,$B0,$B0,$B0,$A0,$A0,$A0,$A0,$93,$83,$8F,$92,$85,$A0,$B0,$B0,$B0,$B0,$B0,$B0,$A0,$A0,$A0,$8C,$85,$96,$85,$8C,$A0,$B0
	.byte $B0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
	.byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$5A

l_0FF1

	.byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
	.byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$8C,$89,$96,$85,$93,$A0,$4E,$4F,$50,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0
	.byte $94,$89,$8D,$85,$92,$A0,$B0,$B0,$B0,$A0,$A0,$A0,$A0,$A0,$A0,$5A,$20

l_1042

	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$13,$11,$15,$09,$12,$0D,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$31,$20

l_10F0

	.byte $14,$0B,$31,$20,$30,$30,$30,$30,$30,$30,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$32,$20

l_1140

	.byte $14

l_1141

	.byte $0B,$32,$20,$30,$30,$30,$30,$30,$30,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$33,$20

l_1190

	.byte $14,$0B,$33,$20,$30,$30,$30,$30,$30,$30,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$34,$20

l_11E0

	.byte $14,$0B,$34,$20,$30,$30,$30,$30,$30,$30,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$35,$20

l_1230

	.byte $14,$0B,$35,$20

l_1234

	.byte $30,$30,$30,$30,$30,$30,$20,$20,$20,$20,$20,$20

l_1240

	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$5B,$5B,$5B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0A,$0B,$0C,$0D,$0E,$0F,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19
	.byte $1A,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20

l_133F

	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20

l_138A

	.byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$A0
	.byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$20,$20,$20,$20,$26,$27,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$20,$20,$20,$20,$20,$20,$2A,$2B,$20,$26,$2C
	.byte $20,$2E,$2F,$20,$3A,$20,$26,$3C,$20,$3E,$3F,$20,$20,$20,$20,$20,$20,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$28,$29,$20,$28,$2D,$20,$28,$29,$20,$3B,$20,$2E,$3D,$20,$2E,$2F,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$A0,$A0,$A0
	.byte $A0,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$A0,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$4E,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20

l_1489

	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$0D,$19,$13,$14,$05,$12,$19,$20,$02,$0F,$0E,$15,$13,$20,$20,$49,$20,$48,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$13,$11,$15,$09,$12,$0D,$20,$44,$45,$44,$45,$44,$45
	.byte $44,$43,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$31,$30,$20,$10,$0F,$09,$0E,$14,$13,$20,$06,$0F,$12,$20,$46,$46,$46,$46,$46,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20

l_1588

	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$4E,$4F,$50,$51,$52,$53,$54
	.byte $55,$4E,$4F,$50,$51,$52,$53,$54,$55,$4E,$4F,$50,$51,$52,$53,$54,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $55,$90,$8C,$95,$87,$A0,$8A,$8F,$99,$93,$94,$89,$83,$8B,$A0,$89,$8E,$A0,$90,$8F,$92,$94,$A0,$B1,$55,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$A0,$20,$20,$20,$20,$20,$20,$4E,$4F,$50,$51,$52,$53,$54,$55,$4E,$4F,$50,$51,$52,$53,$54,$55,$4E,$4F,$50,$51,$52,$53,$54
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$A0,$A0,$A0,$A0,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0

l_1687

	.byte $A0,$A0,$20,$20,$20,$10,$12,$05,$13,$13,$20,$20,$86,$89,$92,$85,$20,$14,$0F,$20,$13,$14,$01,$12,$14,$20,$20,$20,$A0,$A0,$A0,$A0
	.byte $A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0,$A0

l_16D2

	.byte $1C,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D
	.byte $1D,$1D,$1D,$1D,$1D,$1D,$1D,$1E,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$1B,$20,$1C,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D
	.byte $1D,$1D,$1D,$1D,$1D,$1E,$20,$1C,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$24,$20,$1B,$1B,$20,$1B,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B
	.byte $1B,$20,$1B,$20,$1C,$1D,$24,$20,$25,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$24,$20,$1B,$20,$1B,$20,$1D,$20,$22,$20,$1C,$1D,$1D
	.byte $1D,$1D,$1D,$1D,$1D,$1E,$20,$1B,$1B,$20,$1B,$20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B
	.byte $20,$20,$20,$1B,$20,$1B,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$1B,$20,$1B,$20,$1B,$20,$1C,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D

l_17D1

	.byte $1D,$1D,$24,$20,$22,$20,$1B,$20,$21,$1D,$1D,$1D,$1F,$20,$1B,$20,$22,$20,$1D,$20,$22,$20,$1B,$20,$1B,$1B,$20,$1B,$20,$1B,$20,$1B
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$20,$20,$20,$1B,$20,$1B,$20
	.byte $1B,$1B,$20,$1B,$20,$1B,$20,$1B,$20,$1C,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1E,$20,$1B,$20,$21,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1F,$20
	.byte $21,$1D,$1D,$1D,$1F,$20,$23,$20,$23,$23,$20,$1B,$20,$1B,$20,$1B,$20,$23,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$20,$1B,$20,$20,$20,$25,$1D,$1D,$1D,$1D
	.byte $24,$20,$1B,$20,$1B,$20,$1C,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$24,$20,$25,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1E,$22,$20,$1B,$20,$1B,$20,$1B
	.byte $20,$22,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $1B,$1B,$20,$1B,$20,$1B,$20,$1B,$20,$21,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1F,$20,$1B,$20,$1B,$20,$1C,$1D,$1D,$1D,$1D,$1D,$1D

l_18D0

	.byte $1D,$1D,$1D,$24,$20,$25,$1D,$1E,$20,$1B,$1B,$20,$1B,$20,$1B,$20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$23
	.byte $20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$1B,$20,$1B,$20,$1B,$20,$1B,$20,$1D,$1D,$1D,$1D,$1D,$1D
	.byte $1E,$20,$25,$1D,$20,$1B,$20,$20,$20,$23,$20,$1C,$1D,$1D,$24,$20,$25,$1D,$1D,$1D,$1D,$1E,$20,$1B,$20,$1B,$1B,$20,$1B,$20,$1B,$20
	.byte $1B,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$20,$20,$20,$1B,$20,$22,$20,$20,$20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B
	.byte $20,$1B,$1B,$20,$1B,$20,$23,$20,$21,$1D,$1D,$1D,$1D,$1D,$24,$20,$1B,$20,$25,$1D,$1D,$1F,$20,$1B,$20,$22,$20,$21,$1D,$1D,$1D,$1D
	.byte $24,$20,$25,$1D,$1D,$1F,$20,$1B,$20,$1B,$1B,$20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$20,$20,$20,$20,$20,$1B
	.byte $20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$1B,$20,$21,$1D,$1D,$1D,$1D,$1D,$1D,$24,$20,$25,$1D,$1D
	.byte $1F,$20,$25,$1D,$1D,$1D,$1D,$1F,$20,$21,$1D,$1D,$24,$20,$25,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1F,$20,$1B,$1B,$20,$20,$20,$20

l_19CF

	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$1B,$21,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D
	.byte $1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1F

l_1A1A

	.byte $1C,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D
	.byte $1D,$1D,$1D,$1D,$1D,$1D,$1D,$1E,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$1B,$20,$1C,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$24,$20,$25,$1D
	.byte $1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1E,$20,$1C,$1D,$1D,$1D,$1D,$1D,$1E,$20,$20,$1B,$1B,$20,$1B,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$20,$20,$20,$20,$20,$1B,$20,$20,$1B
	.byte $1B,$20,$1B,$20,$25,$1D,$1D,$1D,$24,$20,$25,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$24,$20,$25,$1D,$1D,$1D,$1D,$24,$20,$1B,$20,$1B,$20
	.byte $22,$20,$22,$20,$1B,$20,$20,$1B,$1B,$20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$1B,$20,$1B,$20,$1B,$20,$1B,$20,$1B,$20,$20,$1B,$1B,$20,$21,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$24,$20,$25,$1D

l_1B19

	.byte $1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$24,$20,$1B,$20,$1B,$20,$1B,$20,$1B,$20,$21,$1E,$20,$1B,$1B,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$20,$1B,$20,$1B,$20,$20,$1B,$20
	.byte $23,$21,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1F,$20,$1B
	.byte $20,$1B,$20,$21,$24,$20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$20,$20,$20,$20,$1B,$20,$20,$20,$20,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$24,$20,$25,$1D
	.byte $1D,$1D,$24,$20,$25,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1E,$20,$1B,$20,$21,$1D,$1D,$24,$20,$1B,$20,$1B,$1B,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$20,$20,$20,$20,$20,$20,$1B,$20
	.byte $1B,$1B,$20,$1C,$1D,$1D,$24,$20,$25,$1D,$1D,$1D,$1E,$20,$25,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1E,$20,$1C,$1D,$1D,$24,$20,$1B,$20

l_1C18

	.byte $21,$1D,$1D,$1D,$1D,$24,$20,$1B,$20,$1B,$1B,$20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$23
	.byte $20,$1B,$20,$20,$20,$20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$1B,$20,$23,$20,$25,$1D,$1D,$1D,$1D,$24,$20,$21,$1D,$1D
	.byte $1D,$1D,$1D,$1D,$1D,$24,$20,$20,$20,$1B,$20,$1C,$1D,$1D,$1F,$20,$25,$1D,$1D,$1D,$1D,$1E,$20,$1B,$20,$1B,$1B,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$22,$20,$1B,$20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B
	.byte $20,$1B,$1B,$20,$22,$20,$25,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1F,$20,$1B,$20,$21,$1D,$1D,$1D,$1D
	.byte $24,$20,$25,$1D,$1D,$1F,$20,$1B,$20,$1B,$1B,$20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$1B,$20,$21,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D
	.byte $1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1F,$20,$25,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1F,$20,$1B,$1B,$20,$20,$20,$20

l_1D17

	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$1B,$21,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D
	.byte $1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1F

l_1D62

	.byte $1C,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D
	.byte $1D,$1D,$1D,$1D,$1D,$1D,$1D,$1E,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$1B,$20,$1C,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$24,$20,$25,$1D,$1D
	.byte $1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$24,$20,$25,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1E,$20,$1B,$1B,$20,$23,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B
	.byte $1B,$20,$20,$20,$1C,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$24,$20,$25,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D
	.byte $1D,$1D,$1D,$1E,$20,$1B,$20,$1B,$1B,$20,$22,$20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$20,$1B,$1B,$20,$1B,$20,$23,$20,$1C,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D

l_1E61

	.byte $1D,$1D,$1D,$1D,$1D,$1D,$1D,$24,$20,$25,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1E,$20,$1B,$20,$1B,$20,$1B,$1B,$20,$1B,$20,$20,$20,$1B
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$20,$1B,$20
	.byte $1B,$1B,$20,$1B,$20,$22,$20,$1B,$20,$1C,$1D,$1D,$24,$20,$25,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$24,$20,$25,$1D,$1D,$1D,$1D,$1D,$1D
	.byte $1E,$20,$1B,$20,$23,$20,$1B,$20,$23,$23,$20,$1B,$20,$1B,$20,$1B,$20,$23,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$20,$20,$20,$1B,$20,$20,$20,$20,$1B,$20,$1B,$20,$1B,$20,$20,$20,$25,$1D,$20,$20,$20
	.byte $20,$20,$1C,$1D,$24,$20,$25,$1D,$1D,$1D,$1D,$1E,$20,$1D,$24,$20,$1B,$20,$1B,$20,$22,$20,$1B,$20,$22,$22,$20,$1B,$20,$1B,$20,$23
	.byte $20,$22,$20,$20,$20,$20,$1C,$1D,$1D,$1D,$1F,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$20,$20,$20,$1B,$20,$1B,$20,$1B,$20,$1B,$20
	.byte $1B,$1B,$20,$1B,$20,$1B,$20,$20,$20,$21,$1D,$1D,$1D,$1D,$1F,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$21,$1D,$1D,$1D

l_1F60

	.byte $1D,$1F,$20,$1B,$20,$1B,$20,$1B,$20,$1B,$1B,$20,$1B,$20,$1B,$20,$22,$20,$20,$20,$20,$20,$20,$20,$20,$1C,$1D,$1D,$24,$20,$25,$1D
	.byte $1D,$1D,$1E,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$20,$23,$20,$1B,$1B,$20,$1B,$20,$1B,$20,$21,$1D,$1D,$1D,$1D,$1D,$1D,$1D
	.byte $1D,$1F,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$25,$1D,$24,$20,$25,$1D,$1D,$1F,$20,$1B,$20,$20,$20,$1B,$1B,$20,$1B,$20,$1B,$20
	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1C,$1D,$1D,$1D,$1D,$1E,$20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$22
	.byte $20,$1B,$1B,$20,$1B,$20,$21,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1F,$20,$20,$20,$20,$1B,$20,$21,$1D,$1D,$1D,$1D,$24
	.byte $20,$25,$1D,$1D,$1D,$1F,$20,$1B,$20,$1B,$1B,$20,$1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$22,$20
	.byte $1B,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$1B,$20,$1B,$1B,$20,$21,$1D,$1D,$1D,$1D,$24,$20,$25,$1D,$1D,$1D,$1D
	.byte $1D,$1D,$1D,$1D,$1D,$1D,$1F,$20,$21,$1D,$1D,$1D,$1D,$24,$20,$25,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1F,$20,$1B,$1B,$20,$20,$20,$20

l_205F

	.byte $20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte $20,$20,$1B,$21,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D
	.byte $1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1D,$1F,$04

l_20AB

	.byte $F2,$F2,$C2,$F2,$92,$F2,$F2,$C2,$F2,$62,$12,$F2,$F2,$F2,$12,$F2,$F2,$A2,$62,$F2,$F2,$F2,$92,$12,$F2,$F2,$12,$F2,$F2,$F2,$12,$02
	.byte $02,$B2,$A2,$F2,$92,$12,$62,$82,$F2,$92,$02,$F2,$B2,$F2,$B2,$F2,$F2,$B2,$A2,$F3,$93,$F2,$F2,$F2,$92,$B2,$F2,$F2,$B2,$F2,$F2,$02
	.byte $F2,$C2,$D2,$F2,$D2,$F2,$F2,$F2,$F2,$C2,$02,$A2,$C2,$F2,$82,$F2,$F2,$F2,$A2,$12,$F2,$F2,$92,$02,$F2,$92,$12,$F3,$F3,$F2,$A3,$E3
	.byte $F2,$F5,$A5,$F2,$67,$F7,$99,$09,$F2,$CB,$FB,$F2,$62,$F2,$62,$F2,$F2,$92,$A2,$F2,$F2,$F2,$12,$B2,$F2,$12,$F2,$F2,$32,$F2,$F2,$12
	.byte $F2,$22,$A2,$F3,$63,$F2,$B3,$03,$F2,$F5,$F5,$F2,$F7,$F2,$B9,$C9,$F2,$1B,$FB,$F2,$B2,$02,$02,$D2,$F2,$12,$F2,$F2,$12,$F2,$92,$12
	.byte $F2,$02,$F2,$82,$62,$F2,$62,$42,$F2,$12,$F2,$12,$F2,$F2,$92,$C2,$F2,$02,$F2,$62,$A2,$F2,$02,$02,$F2,$F2,$F2,$12,$B2,$F2,$12,$A2
	.byte $F2,$F2,$F2,$F2,$F2,$F2,$12,$F2,$F2,$12,$F2,$F2,$22,$F2,$F2,$82,$F2,$F2,$12,$B2,$F2,$F2,$92,$52,$F2,$CE,$F2,$82,$42,$F2,$C2,$02
	.byte $F2,$F2,$F2,$B2,$12,$B2,$F2,$F2,$F2,$F2,$F2,$82,$A2,$F2,$B2,$B2,$F2,$F2,$F2,$92,$F2,$F2,$82,$12,$F2,$F2,$F2,$B2,$E2,$F2,$F2

l_21AA

	.byte $62,$F2,$F2,$F2,$92,$62,$F2,$C2,$02,$F2,$F2,$F2,$82,$B2,$F2,$F2,$92,$F2,$F2,$92,$F2,$12,$F2,$F2,$E2,$12,$F2,$F2,$02,$A2,$F2,$82
	.byte $F2,$F2,$82,$F9,$F9,$F9,$F9,$A9,$C9,$F9,$09,$49,$F9,$F9,$F9,$A9,$92,$F2,$FA,$82,$FB,$F2,$F2,$E2,$02,$F2,$C2,$F2,$D2,$C2,$F2,$E2
	.byte $02,$E2,$F2,$F2,$12,$F2,$F2,$92,$62,$F2,$C2,$F2,$F2,$F2,$F2,$82,$B2,$F2,$F2,$B2,$12,$62,$F2,$F2,$F2,$F2,$02,$F2,$92,$F2,$F2,$D2
	.byte $B2,$F2,$F2,$B2,$F2,$F2,$F2,$82,$F2,$F2,$82,$B2,$F2,$F2,$F2,$02,$F2,$F2,$82,$16,$F7,$F5,$84,$13,$F2,$F2,$1E,$FE,$FE,$9E,$FE,$1E
	.byte $8E,$FF,$F2,$F2,$F2,$12,$F2,$F2,$92,$F2,$12,$82,$F2,$62,$F2,$F2,$F2,$F2,$12,$F2,$F2,$12,$F2,$F2,$92,$F2,$F2,$F2,$F2,$12,$F2,$B2
	.byte $F2,$F2,$C2,$82,$F2,$F2,$F2,$F2,$F2,$F2,$F2,$12,$F2,$F2,$F2,$02,$C2,$F2,$82,$F2,$F2,$F2,$F2,$F2,$F2,$F2,$92,$12,$12,$82,$F2,$F2
	.byte $F2,$F2,$F5,$F5,$F5,$95,$F5,$C5,$D5,$F5,$F5,$B2,$F5,$85,$F5,$C2,$01,$A1,$F1,$C1,$F1,$82,$F2,$62,$02,$F2,$92,$62,$F2,$F2,$F2,$82
	.byte $12,$F2,$42,$12,$12,$F2,$F2,$F2,$F2,$F2,$F2,$B2,$F2,$42,$F2,$C2,$02,$A2,$02,$82,$82,$62,$F2,$62,$42,$F2,$A2,$B2,$F2,$F2,$F2

l_22A9

	.byte $02,$F2,$F2,$82,$F2,$F2,$F2,$F2,$92,$F2,$F2,$12,$62,$F2,$F2,$F2,$92,$42,$F2,$C2,$92,$D2,$F2,$F2,$A2,$F2,$F2,$F2,$92,$F2,$F2,$F2
	.byte $82,$82,$F2,$F2,$B2,$F2,$F2,$F2,$02,$C2,$F2,$82,$F2,$F2,$F2,$F2,$F2,$F2,$F2,$92,$12,$F2,$F2,$F2,$A2,$11,$A2,$F3,$B4,$F5,$86,$F7
	.byte $68,$E9,$FA,$FB,$6C,$FD,$8E,$FF,$91,$12,$F3,$F4,$F5,$F6,$E7,$F8,$12,$F2,$B2,$92,$E2,$B2,$F2,$F2,$B2,$F2,$F2,$A2,$62,$F2,$F2,$F2
	.byte $93,$17,$F7,$F7,$17,$F7,$F7,$F7,$F7,$F7,$F7,$A7,$C7,$F7,$07,$F7,$F7,$E7,$A7,$E7,$97,$F7,$F7,$87,$F9,$F2,$F2,$E2,$02,$F2,$C2,$F2
	.byte $42,$12,$F2,$D2,$92,$F2,$12,$F2,$F2,$1A,$FC,$BB,$2D,$BE,$FF,$F1,$12,$83,$F4,$F5,$F6,$B7,$9F,$F9,$CA,$8B,$FC,$FD,$9E,$FF,$71,$B2
	.byte $F2,$F2,$F2,$F2,$C2,$F2,$82,$F2,$F2,$F2,$F2,$F2,$F2,$F2,$92,$12,$12,$82,$F2,$02,$F2,$F2,$92,$62,$F2,$62,$42,$92,$62,$F2,$42,$62
	.byte $F2,$E2,$12,$F2,$12,$F2,$C2,$F2,$F2,$12,$F2,$F2,$92,$E2,$12,$F2,$F2,$92,$F2,$A2,$F2,$F2,$F2,$F2,$F2,$F2,$F2,$F2,$62,$F2,$62,$F2
	.byte $F2,$82,$F2,$22,$82,$F2,$A2,$02,$B2,$F2,$F2,$12,$F2,$F2,$92,$F2,$12,$12,$F2,$92,$42,$F2,$F2,$F2,$F2,$12,$F2,$F2,$F2,$F2,$F2

l_23A8

	.byte $F2,$C2,$82,$F2,$E2,$64,$F4,$F4,$F4,$F4,$42,$A2,$17,$97,$F7,$47,$F2,$94,$F4,$B4,$F4,$94,$E4,$14,$F4,$F2,$B2,$F2,$B2,$F2,$92,$D2
	.byte $F2,$F2,$F2,$F2,$F2,$C2,$F2,$82,$B2,$F2,$62,$F2,$02,$12,$C2,$B2,$F2,$B2,$C2,$12,$D2,$F2,$F2,$F2,$F2,$F2,$F2,$F2,$32,$F2,$F2,$92
	.byte $F2,$02,$82,$F2,$F2,$E2,$F2,$F2,$B2,$B2,$62,$B1,$31,$35,$A7,$31,$32,$31

l_23FA
		LDX #$00                           ; (23FA) Set X to #$00 (0 / 00000000)


l_23FC
		LDA l_0FA0,X                       ; (23FC) Load A with l_0FA0,X
		STA $0400,X                        ; (23FF) Store A to $0400,X
		LDA l_0FF1,X                       ; (2402) Load A with l_0FF1,X
		STA $0798,X                        ; (2405) Store A to $0798,X
		INX                                ; (2408) Increment X
		CPX #$50                           ; (2409) Subtract #$50 from X (80 / 01010000)
		BNE l_23FC                         ; (240B) Branch to l_23FC if Not Equal
		RTS                                ; (240D) Return from Subroutine


l_240E
		LDX #$00                           ; (240E) Set X to #$00 (0 / 00000000)


l_2410
		STA $D800,X                        ; (2410) Store A to $D800,X
		STA $DB98,X                        ; (2413) Store A to $DB98,X
		INX                                ; (2416) Increment X
		CPX #$50                           ; (2417) Subtract #$50 from X (80 / 01010000)
		BNE l_2410                         ; (2419) Branch to l_2410 if Not Equal
		RTS                                ; (241B) Return from Subroutine


l_241C
		LDX #$00                           ; (241C) Set X to #$00 (0 / 00000000)


l_241E
		LDA l_1042,X                       ; (241E) Load A with l_1042,X
		STA $0450,X                        ; (2421) Store A to $0450,X
		LDA l_1141,X                       ; (2424) Load A with l_1141,X
		STA $054F,X                        ; (2427) Store A to $054F,X
		LDA l_1240,X                       ; (242A) Load A with l_1240,X
		STA $064E,X                        ; (242D) Store A to $064E,X
		INX                                ; (2430) Increment X
		CPX #$FF                           ; (2431) Subtract #$FF from X (255 / 11111111)
		BNE l_241E                         ; (2433) Branch to l_241E if Not Equal
		LDX #$00                           ; (2435) Set X to #$00 (0 / 00000000)


l_2437
		LDA l_133F,X                       ; (2437) Load A with l_133F,X
		STA $074D,X                        ; (243A) Store A to $074D,X
		INX                                ; (243D) Increment X
		CPX #$4B                           ; (243E) Subtract #$4B from X (75 / 01001011)
		BNE l_2437                         ; (2440) Branch to l_2437 if Not Equal
		RTS                                ; (2442) Return from Subroutine


l_2443
		LDX #$00                           ; (2443) Set X to #$00 (0 / 00000000)


l_2445
		LDA l_138A,X                       ; (2445) Load A with l_138A,X
		STA $0450,X                        ; (2448) Store A to $0450,X
		LDA l_1489,X                       ; (244B) Load A with l_1489,X
		STA $054F,X                        ; (244E) Store A to $054F,X
		LDA l_1588,X                       ; (2451) Load A with l_1588,X
		STA $064E,X                        ; (2454) Store A to $064E,X
		INX                                ; (2457) Increment X
		CPX #$FF                           ; (2458) Subtract #$FF from X (255 / 11111111)
		BNE l_2445                         ; (245A) Branch to l_2445 if Not Equal
		LDX #$00                           ; (245C) Set X to #$00 (0 / 00000000)


l_245E
		LDA l_1687,X                       ; (245E) Load A with l_1687,X
		STA $074D,X                        ; (2461) Store A to $074D,X
		INX                                ; (2464) Increment X
		CPX #$4B                           ; (2465) Subtract #$4B from X (75 / 01001011)
		BNE l_245E                         ; (2467) Branch to l_245E if Not Equal
		RTS                                ; (2469) Return from Subroutine


l_246A
		LDX #$00                           ; (246A) Set X to #$00 (0 / 00000000)


l_246C
		LDA l_16D2,X                       ; (246C) Load A with l_16D2,X
		STA $0450,X                        ; (246F) Store A to $0450,X
		LDA l_17D1,X                       ; (2472) Load A with l_17D1,X
		STA $054F,X                        ; (2475) Store A to $054F,X
		LDA l_18D0,X                       ; (2478) Load A with l_18D0,X
		STA $064E,X                        ; (247B) Store A to $064E,X
		INX                                ; (247E) Increment X
		CPX #$FF                           ; (247F) Subtract #$FF from X (255 / 11111111)
		BNE l_246C                         ; (2481) Branch to l_246C if Not Equal
		LDX #$00                           ; (2483) Set X to #$00 (0 / 00000000)


l_2485
		LDA l_19CF,X                       ; (2485) Load A with l_19CF,X
		STA $074D,X                        ; (2488) Store A to $074D,X
		INX                                ; (248B) Increment X
		CPX #$4B                           ; (248C) Subtract #$4B from X (75 / 01001011)
		BNE l_2485                         ; (248E) Branch to l_2485 if Not Equal
		RTS                                ; (2490) Return from Subroutine


l_2491
		LDX #$00                           ; (2491) Set X to #$00 (0 / 00000000)


l_2493
		LDA l_1A1A,X                       ; (2493) Load A with l_1A1A,X
		STA $0450,X                        ; (2496) Store A to $0450,X
		LDA l_1B19,X                       ; (2499) Load A with l_1B19,X
		STA $054F,X                        ; (249C) Store A to $054F,X
		LDA l_1C18,X                       ; (249F) Load A with l_1C18,X
		STA $064E,X                        ; (24A2) Store A to $064E,X
		INX                                ; (24A5) Increment X
		CPX #$FF                           ; (24A6) Subtract #$FF from X (255 / 11111111)
		BNE l_2493                         ; (24A8) Branch to l_2493 if Not Equal
		LDX #$00                           ; (24AA) Set X to #$00 (0 / 00000000)


l_24AC
		LDA l_1D17,X                       ; (24AC) Load A with l_1D17,X
		STA $074D,X                        ; (24AF) Store A to $074D,X
		INX                                ; (24B2) Increment X
		CPX #$4B                           ; (24B3) Subtract #$4B from X (75 / 01001011)
		BNE l_24AC                         ; (24B5) Branch to l_24AC if Not Equal
		RTS                                ; (24B7) Return from Subroutine


l_24B8
		LDX #$00                           ; (24B8) Set X to #$00 (0 / 00000000)


l_24BA
		LDA l_1D62,X                       ; (24BA) Load A with l_1D62,X
		STA $0450,X                        ; (24BD) Store A to $0450,X
		LDA l_1E61,X                       ; (24C0) Load A with l_1E61,X
		STA $054F,X                        ; (24C3) Store A to $054F,X
		LDA l_1F60,X                       ; (24C6) Load A with l_1F60,X
		STA $064E,X                        ; (24C9) Store A to $064E,X
		INX                                ; (24CC) Increment X
		CPX #$FF                           ; (24CD) Subtract #$FF from X (255 / 11111111)
		BNE l_24BA                         ; (24CF) Branch to l_24BA if Not Equal
		LDX #$00                           ; (24D1) Set X to #$00 (0 / 00000000)


l_24D3
		LDA l_205F,X                       ; (24D3) Load A with l_205F,X
		STA $074D,X                        ; (24D6) Store A to $074D,X
		INX                                ; (24D9) Increment X
		CPX #$4B                           ; (24DA) Subtract #$4B from X (75 / 01001011)
		BNE l_24D3                         ; (24DC) Branch to l_24D3 if Not Equal
		RTS                                ; (24DE) Return from Subroutine


l_24DF
		LDX #$00                           ; (24DF) Set X to #$00 (0 / 00000000)


l_24E1
		LDA l_20AB,X                       ; (24E1) Load A with l_20AB,X
		STA $D850,X                        ; (24E4) Store A to $D850,X
		LDA l_21AA,X                       ; (24E7) Load A with l_21AA,X
		STA $D94F,X                        ; (24EA) Store A to $D94F,X
		LDA l_22A9,X                       ; (24ED) Load A with l_22A9,X
		STA $DA4E,X                        ; (24F0) Store A to $DA4E,X
		INX                                ; (24F3) Increment X
		CPX #$FF                           ; (24F4) Subtract #$FF from X (255 / 11111111)
		BNE l_24E1                         ; (24F6) Branch to l_24E1 if Not Equal
		LDX #$00                           ; (24F8) Set X to #$00 (0 / 00000000)


l_24FA
		LDA l_23A8,X                       ; (24FA) Load A with l_23A8,X
		STA $DB4D,X                        ; (24FD) Store A to $DB4D,X
		INX                                ; (2500) Increment X
		CPX #$4B                           ; (2501) Subtract #$4B from X (75 / 01001011)
		BNE l_24FA                         ; (2503) Branch to l_24FA if Not Equal
		RTS                                ; (2505) Return from Subroutine

	.byte $00,$00,$A2,$00,$BD,$70,$2A,$48,$BD,$78,$2A,$9D,$70,$2A,$BD,$80,$2A,$9D,$78,$2A,$BD,$88,$2A,$9D,$80,$2A,$BD,$90,$2A,$9D,$88,$2A
	.byte $BD,$98,$2A,$9D,$90,$2A,$BD,$A0,$2A,$9D,$98,$2A,$BD,$A8,$2A,$9D,$A0,$2A,$68,$9D,$A8,$2A,$E8,$E0,$08,$D0,$C9,$60

l_2542
		LDX #$00                           ; (2542) Set X to #$00 (0 / 00000000)


l_2544
		LDA #$04                           ; (2544) Set A to #$04 (4 / 00000100)
		STA $D878,X                        ; (2546) Store A to $D878,X
		LDA #$05                           ; (2549) Set A to #$05 (5 / 00000101)
		STA $D8F2,X                        ; (254B) Store A to $D8F2,X
		LDA #$07                           ; (254E) Set A to #$07 (7 / 00000111)
		STA $D940,X                        ; (2550) Store A to $D940,X
		LDA #$06                           ; (2553) Set A to #$06 (6 / 00000110)
		STA $D990,X                        ; (2555) Store A to $D990,X
		LDA #$02                           ; (2558) Set A to #$02 (2 / 00000010)
		STA $D9E0,X                        ; (255A) Store A to $D9E0,X
		LDA #$01                           ; (255D) Set A to #$01 (1 / 00000001)
		STA $DA30,X                        ; (255F) Store A to $DA30,X
		LDA #$03                           ; (2562) Set A to #$03 (3 / 00000011)
		STA $DA80,X                        ; (2564) Store A to $DA80,X
		LDA #$04                           ; (2567) Set A to #$04 (4 / 00000100)
		STA $DAD0,X                        ; (2569) Store A to $DAD0,X
		INX                                ; (256C) Increment X
		CPX #$28                           ; (256D) Subtract #$28 from X (40 / 00101000)
		BNE l_2544                         ; (256F) Branch to l_2544 if Not Equal
		RTS                                ; (2571) Return from Subroutine

	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$46,$00,$70,$00
	.byte $01,$00,$15,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$4B,$80,$46,$00,$01,$00,$15,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$4B,$00,$70,$00

l_2648

	.byte $8E

l_2649

	.byte $04

l_264A

	.byte $8E

l_264B

	.byte $04

l_264C

	.byte $8E

l_264D

	.byte $04

l_264E

	.byte $8E

l_264F

	.byte $04

l_2650

	.byte $8E

l_2651

	.byte $04

l_2652

	.byte $8E

l_2653

	.byte $04

l_2654

	.byte $8E

l_2655

	.byte $04

l_2656

	.byte $8E

l_2657

	.byte $04

l_2658

	.byte $55

l_2659

	.byte $07

l_265A

	.byte $55

l_265B

	.byte $07

l_265C

	.byte $55

l_265D

	.byte $07

l_265E

	.byte $55

l_265F

	.byte $07

l_2660

	.byte $55

l_2661

	.byte $07

l_2662

	.byte $CB

l_2663

	.byte $04

l_2664

	.byte $CB

l_2665

	.byte $04

l_2666

	.byte $CB

l_2667

	.byte $04

l_2668

	.byte $CB

l_2669

	.byte $04

l_266A

	.byte $CB

l_266B

	.byte $04

l_266C

	.byte $75

l_266D

	.byte $05

l_266E

	.byte $75

l_266F

	.byte $05

l_2670

	.byte $75

l_2671

	.byte $05

l_2672

	.byte $75

l_2673

	.byte $05

l_2674

	.byte $75

l_2675

	.byte $05

l_2676

	.byte $FB

l_2677

	.byte $06

l_2678

	.byte $FB

l_2679

	.byte $06

l_267A

	.byte $FB

l_267B

	.byte $06

l_267C

	.byte $FB

l_267D

	.byte $06

l_267E

	.byte $FB

l_267F

	.byte $06

l_2680

	.byte $03

l_2681

	.byte $02

l_2682

	.byte $01,$00

l_2684

	.byte $01

l_2685

	.byte $03

l_2686

	.byte $F7

l_2687

	.byte $04

l_2688

	.byte $01

l_2689

	.byte $FA

l_268A

	.byte $55

l_268B

	.byte $07,$00

l_268D

	.byte $00

l_268E

	.byte $47

l_268F

	.byte $16

l_2690

	.byte $00

l_2691

	.byte $4D

l_2692

	.byte $97

l_2693

	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

l_26AC

	.byte $10,$12,$05,$13,$13,$20,$06,$09,$12,$05,$20,$14,$0F,$20,$13,$14,$01,$12,$14,$20

l_26C0

	.byte $87,$85,$94,$A0,$92,$85,$81,$84,$99,$20

l_26CA

	.byte $8C,$85,$96,$85,$8C,$A0,$A0,$A0,$A0,$20

l_26D4

	.byte $02,$0F,$0E,$15,$13,$20,$12,$15,$0E,$20,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$4D,$80,$28,$00,$01,$00,$0B,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$4D,$00,$3E,$00,$01,$00,$0B,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$4D,$31,$3E,$00,$01,$00,$0B,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$4D,$00,$3E,$00,$01,$00,$0B,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$3E,$7D,$63,$77,$6F,$43,$23,$63,$7E,$7D,$63,$76
	.byte $6E,$43,$3F,$7E,$3E,$7D,$63,$60,$60,$43,$3F,$3E,$7E,$7D,$63,$63,$63,$43,$3F,$7E,$7E,$7D,$60,$76,$6E,$40,$3F,$7F,$7E,$7D,$60,$76
	.byte $6E,$40,$20,$60,$3E,$7D,$60,$64,$6F,$43,$3F,$3E,$62,$61,$63,$77,$6F,$43,$23,$63,$7E,$7C,$18,$10,$08,$18,$3E,$7E,$7E,$7C,$08,$04
	.byte $0C,$0C,$3C,$7C,$62,$64,$68,$70,$68,$4C,$26,$63,$60,$60,$60,$60,$60,$40,$3F,$7F,$62,$75,$7B,$63,$63,$43,$23,$63,$62,$71,$7B,$77
	.byte $6F,$47,$23,$63,$3E,$7D,$63,$63,$63,$43,$3F,$3E,$7E,$7D,$63,$77,$6E,$40,$20,$60,$3C,$7C,$62,$76,$6E,$4E,$3F,$3D,$7E,$7D,$63,$77
	.byte $6E,$4C,$26,$63,$3E,$7D,$60,$76,$2F,$03,$3F,$7E,$7E,$7D,$18,$14,$0C,$1C,$1C,$1C,$62,$61,$63,$63,$63,$43,$3F,$3E,$62,$61,$63,$63
	.byte $63,$16,$1C,$08,$62,$61,$63,$63,$6B,$5F,$37,$63,$40,$61,$32,$14,$0C,$16,$23,$41,$62,$61,$63,$63,$2E,$1C,$1C,$1C,$7E,$7D,$02,$04
	.byte $08,$10,$3F,$7F,$14,$14,$28,$28,$14,$14,$28,$28,$00,$00,$2A,$2A,$16,$16,$28,$28,$00,$00,$66,$66,$66,$66,$00,$00,$00,$00,$A8,$A8
	.byte $94,$94,$28,$28,$14,$14,$68,$68,$54,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$14,$14,$29,$29,$15,$15,$00,$00,$00,$00,$00,$00
	.byte $14,$14,$28,$28,$14,$14,$28,$28,$00,$00,$00,$00,$00,$00,$90,$90,$90,$90,$00,$00,$00,$00,$09,$09,$09,$09,$00,$00,$3F,$40,$80,$80
	.byte $80,$80,$80,$80,$FC,$02,$01,$01,$01,$01,$01,$01,$80,$80,$80,$80,$80,$80,$40,$3F,$01,$01,$01,$01,$01,$01,$02,$FC,$80,$80,$80,$40
	.byte $3F,$00,$00,$00,$00,$00,$00,$00,$FC,$02,$01,$01,$E0,$10,$08,$08,$08,$08,$08,$08,$08,$08,$88,$68,$18,$0C,$12,$E3,$80,$80,$80,$80
	.byte $80,$80,$80,$80,$01,$01,$01,$01,$01,$01,$01,$01,$3E,$7F,$67,$6F,$7B,$73,$7F,$3E,$1C,$3C,$7C,$1C,$1C,$1C,$7F,$7F,$3E,$7F,$03,$3F
	.byte $7E,$60,$7F,$7F,$3E,$7F,$63,$06,$06,$63,$7F,$3E,$60,$60,$60,$60,$6E,$7F,$7F,$0E,$7F,$7F,$60,$7E,$7F,$03,$7F,$7E,$3F,$7F,$60,$7E
	.byte $7F,$63,$7F,$3E,$7F,$7F,$07,$0E,$1C,$38,$70,$60,$3E,$7F,$63,$3E,$3E,$63,$7F,$3E,$3F,$7F,$63,$7F,$3F,$03,$03,$03,$FF,$18,$18,$18
	.byte $18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$FF,$FE,$01,$01,$01,$01,$01,$01,$FE,$E0,$10,$08,$04,$04,$02,$02,$01,$80,$C0,$A0,$90
	.byte $88,$84,$82,$81,$01,$03,$05,$09,$11,$21,$41,$81,$00,$0C,$06,$FF,$FF,$06,$0C,$00,$00,$04,$C6,$FF,$FF,$C6,$04,$00,$00,$C4,$C6,$FF
	.byte $FF,$C6,$C4,$00,$C3,$3C,$5A,$99,$BD,$FF,$66,$3C,$00,$1C,$32,$7D,$7F,$7F,$3E,$1C,$00,$1C,$32,$7D,$7F,$7F,$3E,$1C,$00,$00,$0C,$00
	.byte $06,$00,$00,$00,$00,$00,$C3,$3C,$5A,$FF,$3C,$18,$3C,$5A,$FF,$3C,$18,$3C,$18,$3C,$00,$FF,$18,$3C,$66,$76,$3C,$00,$00,$18,$18,$3C
	.byte $6E,$66,$3C,$00,$00,$B6,$C9,$C9,$C9,$B6,$00,$FF,$00,$4E,$59,$55,$53,$4E,$00,$FF,$00,$00,$4A,$52,$62,$3C,$00,$FF,$66,$99,$3C,$5A
	.byte $FF,$18,$00,$00,$66,$99,$3C,$5A,$FF,$18,$18,$00,$00,$66,$18,$3C,$5A,$FF,$18,$18,$00,$00,$66,$18,$3C,$5A,$FF,$18,$00,$66,$18,$3C
	.byte $5A,$FF,$18,$24,$66,$18,$3C,$5A,$FF,$18,$18,$24,$66,$99,$3C,$5A,$FF,$18,$18,$18,$66,$99,$3C,$5A,$FF,$18,$18,$00,$87,$0F,$27,$73
	.byte $67,$77,$3E,$1C,$00,$0C,$06,$32,$26,$16,$0C,$00,$81,$00,$00,$00,$00,$00,$00,$81,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$06,$D5,$D3
	.byte $D5,$D6,$D6,$FF,$FF,$81,$81,$81,$81,$81,$81,$FF,$3C,$5A,$99,$7E,$3E,$7C,$3E,$7C,$00,$00,$00,$00,$00,$00,$00,$00,$28,$00,$41,$4E
	.byte $44,$49,$CD,$29,$01,$52,$4F,$4C,$C1,$2A,$00,$42,$49,$D4,$2C,$02,$41,$4E,$C4,$2D,$02,$52,$4F,$CC,$2E,$02,$42,$4D,$C9,$30,$01,$41
	.byte $4E,$44,$49,$D9,$31,$01,$41,$4E,$44,$5A,$D8,$35,$01,$52,$4F,$4C,$5A,$D8,$36,$01,$53,$45,$C3,$38,$00,$41,$4E,$44,$D9,$39,$02,$41
	.byte $4E,$44,$D8,$3D,$02,$52,$4F,$4C,$D8,$3E,$02,$52,$54,$C9,$40,$00,$45,$4F,$52,$49,$D8,$41,$01,$45,$4F,$52,$DA,$45,$01,$4C,$53,$52
	.byte $DA,$46,$01,$50,$48,$C1,$48,$00,$45,$4F,$52,$49,$CD,$49,$01,$4C,$53,$52,$C1,$4A,$00,$4A,$4D,$D0,$4C,$02,$45,$4F,$D2,$4D,$02,$4C
	.byte $53,$D2,$4E,$02,$42,$56,$C3,$50,$01,$45,$4F,$52,$49,$D9,$51,$01,$45,$4F,$52,$5A,$D8,$55,$01,$4C,$53,$52,$5A,$D8,$56,$01,$43,$4C
	.byte $C9,$58,$00,$45,$4F,$52,$D9,$59,$02,$45,$4F,$52,$D8,$5D,$02,$4C,$53,$52,$D8,$5E,$02,$52,$54,$D3,$60,$00,$41,$44,$43,$49,$D8,$61
	.byte $01,$41,$44,$43,$DA,$65,$01,$52,$4F,$52,$DA,$66,$01,$50,$4C,$C1,$68,$00,$41,$44,$43,$49,$CD,$69,$01,$52,$4F,$52,$C1,$6A,$00,$4A
	.byte $4D,$50,$49,$C1,$6C,$02,$41,$44,$C3,$6D,$02,$52,$4F,$D2,$6E,$02,$42,$56,$D3,$70,$01,$41,$44,$43,$49,$D9,$71,$01,$41,$44,$43,$5A
	.byte $D8,$75,$01,$52,$4F,$52,$5A,$D8,$76,$01,$53,$45,$C9,$78,$00,$41,$44,$43,$00,$00,$FF,$C3,$BD,$BD,$81,$BD,$BD,$FF,$FF,$83,$BD,$BD
	.byte $83,$BD,$83,$FF,$FF,$C3,$BD,$BF,$BF,$BD,$C3,$FF,$FF,$83,$BD,$BD,$BD,$BD,$83,$FF,$FF,$81,$BF,$BF,$87,$BF,$81,$FF,$FF,$81,$BF,$BF
	.byte $87,$BF,$BF,$FF,$FF,$C3,$BD,$B7,$B1,$BD,$C3,$FF,$FF,$BD,$BD,$81,$BD,$BD,$BD,$FF,$FF,$C1,$F7,$F7,$F7,$F7,$C1,$FF,$FF,$C1,$F7,$F7
	.byte $F7,$F7,$C7,$FF,$FF,$B9,$B7,$AF,$8F,$B7,$B9,$FF,$FF,$BF,$BF,$BF,$BF,$BF,$81,$FF,$FF,$BD,$99,$A5,$BD,$BD,$BD,$FF,$FF,$BD,$9D,$AD
	.byte $B5,$B9,$BD,$FF,$FF,$C3,$BD,$BD,$BD,$BD,$C3,$FF,$FF,$83,$BD,$BD,$83,$BF,$BF,$FF,$FF,$C7,$BB,$BB,$BB,$B3,$C1,$FF,$FF,$83,$BD,$BD
	.byte $83,$B7,$BB,$FF,$FF,$C3,$BD,$BF,$C3,$FD,$83,$FF,$FF,$81,$E7,$E7,$E7,$E7,$E7,$FF,$FF,$BD,$BD,$BD,$BD,$BD,$C3,$FF,$FF,$BD,$BD,$BD
	.byte $BD,$DB,$E7,$FF,$FF,$BD,$BD,$BD,$A5,$99,$BD,$FF,$FF,$BD,$DB,$E7,$E7,$DB,$BD,$FF,$FF,$BD,$BD,$DB,$E7,$E7,$E7,$FF,$FF,$81,$FB,$F7
	.byte $EF,$DF,$81,$FF,$4C,$44,$41,$5A,$D8,$B5,$01,$4C,$44,$58,$5A,$D9,$B6,$01,$43,$4C,$D6,$B8,$00,$4C,$44,$41,$D9,$B9,$02,$54,$53,$D8
	.byte $BA,$00,$4C,$44,$59,$D8,$BC,$02,$4C,$44,$41,$D8,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$43,$50,$59,$49,$CD,$C0,$01,$43,$4D,$50,$49,$D8
	.byte $C1,$01,$43,$50,$59,$DA,$C4,$01,$43,$4D,$50,$DA,$C5,$01,$44,$45,$43,$DA,$C6,$01,$49,$4E,$D9,$C8,$00,$43,$4D,$50,$49,$CD,$C9,$01
	.byte $44,$45,$D8,$CA,$00,$43,$50,$D9,$CC,$02,$43,$4D,$D0,$CD,$02,$44,$45,$C3,$CE,$02,$42,$4E,$C5,$D0,$01,$43,$4D,$50,$49,$D9,$D1,$01
	.byte $43,$4D,$50,$5A,$D8,$D5,$01,$44,$45,$43,$5A,$D8,$D6,$01,$43,$4C,$C4,$D8,$00,$43,$4D,$50,$D9,$D9,$02,$43,$4D,$50,$D8,$DD,$02,$44
	.byte $45,$43,$D8,$DE,$02,$43,$50,$58,$49,$CD,$E0,$01,$FF,$C3,$9D,$AD,$B5,$B9,$C3,$FF,$FF,$F7,$E7,$F7,$F7,$F7,$C1,$FF,$FF,$C3,$BD,$FD
	.byte $C3,$BF,$81,$FF,$FF,$C3,$BD,$FD,$F3,$BD,$C3,$FF,$FF,$FB,$F3,$EB,$DB,$81,$FB,$FF,$FF,$81,$BF,$83,$FD,$BD,$C3,$FF,$FF,$C3,$BD,$BF
	.byte $83,$BD,$C3,$FF,$FF,$81,$FB,$F7,$EF,$DF,$BF,$FF,$FF,$C3,$BD,$BD,$C3,$BD,$C3,$FF,$FF,$C1,$BD,$BD,$C1,$FD,$FD,$FF,$D8,$F6,$FF,$FF
	.byte $00,$87,$04,$87,$CD,$FF,$03,$9C,$07,$FD,$07,$FD,$87,$FF,$87,$C5,$DF,$87,$07,$FF,$00,$FF,$C3,$FF,$07,$E7,$07,$87,$07,$FF,$03,$00
	.byte $00,$07,$44,$10,$00,$FE,$87,$84,$07,$07,$07,$06,$07,$F5,$F5,$0F,$07,$07,$07,$F7,$87,$BF,$F5,$27,$27,$07,$07,$67,$03,$87,$87,$0F
	.byte $F4,$EF,$07,$07,$03,$FF,$00,$6F,$00,$EF,$41,$07,$07,$07,$F7,$EF,$00,$FF,$87,$FF,$00,$FF,$F5,$07,$85,$FF,$07,$0F,$00,$FF,$07,$FF
	.byte $03,$FF,$00,$93,$00,$FF,$87,$F7,$0C,$F7,$97,$10,$F5,$F7,$F5,$FF,$F7,$F5,$87,$93,$87,$FF,$87,$07,$07,$07,$07,$F7,$01,$FF,$07,$F7
	.byte $00,$EF,$00,$EF,$F5,$FF,$02,$FF,$04,$07,$07,$07,$84,$FF,$00,$FF,$87,$FF,$87,$87,$F7,$FF,$87,$87,$87,$FF,$A7,$AE,$07,$FF,$87,$DF
	.byte $00,$FF,$00,$12,$00,$FF,$02,$FF,$03,$F7,$87,$87,$00,$F7,$20,$87,$07,$07,$07,$07,$02,$07,$03,$77,$07,$EF,$87,$07,$85,$FF,$00,$FF
	.byte $27,$05,$87,$00,$03,$F6,$03,$4F,$07,$FF,$07,$87,$F5,$07,$07,$07,$07,$8F,$07,$FF,$27,$97,$03,$FF,$07,$FF,$07,$7F,$00,$9F,$00,$FF
	.byte $00,$FF,$03,$FF,$03,$FF,$03,$07,$07,$07,$87,$FF,$A4,$FF,$00,$10,$F5,$F7,$85,$67,$87,$FF,$00,$07,$E7,$F7,$87,$97,$01,$FF,$F7,$FF
	.byte $00,$87,$04,$87,$57,$FF,$03,$9C,$07,$FF,$07,$F7,$87,$FF,$87,$C5,$F7,$87,$07,$FF,$02,$FF,$83,$FF,$07,$E7,$07,$87,$07,$FF,$03,$00
	.byte $00,$07,$05,$10,$00,$FE,$87,$84,$07,$07,$07,$07,$07,$B4,$B4,$0D,$07,$07,$07,$F7,$07,$BF,$B4,$27,$A7,$07,$27,$26,$03,$07,$07,$1F
	.byte $B4,$EF,$07,$07,$03,$FF,$00,$6F,$00,$EF,$41,$07,$07,$07,$B6,$EF,$00,$FF,$07,$FF,$00,$FF,$B4,$07,$85,$FF,$27,$07,$00,$FF,$05,$FF
	.byte $03,$FF,$00,$BB,$00,$FF,$07,$F7,$0C,$F7,$97,$00,$B5,$B6,$B4,$FF,$B6,$B5,$07,$93,$07,$FF,$87,$07,$07,$07,$06,$F7,$00,$FF,$07,$F7
	.byte $00,$EF,$00,$EF,$B4,$FF,$02,$FF,$04,$07,$07,$07,$04,$FF,$00,$FF,$07,$FF,$07,$07,$B7,$FF,$07,$C7,$07,$FF,$27,$AE,$07,$FF,$07,$FF
	.byte $00,$FF,$00,$12,$00,$FF,$02,$FF,$02,$F7,$07,$07,$00,$B7,$20,$07,$07,$07,$07,$07,$02,$05,$03,$37,$07,$EF,$07,$07,$05,$FF,$00,$FF
	.byte $24,$05,$07,$20,$03,$B6,$03,$4F,$07,$FF,$07,$07,$B5,$07,$07,$07,$07,$0F,$07,$FF,$27,$97,$03,$FF,$07,$FF,$07,$FF,$00,$DF,$00,$FF
	.byte $00,$FF,$03,$FF,$03,$FF,$03,$07,$07,$0F,$07,$FF,$24,$FF,$00,$12,$B4,$B7,$05,$A7,$07,$FF,$00,$07,$A7,$F7,$07,$97,$00,$FF,$B7,$FF
	.byte $00,$07,$04,$07,$05,$FF,$03,$BC,$07,$FF,$07,$F7,$07,$FF,$07,$84,$B7,$07,$07,$FF,$02,$FF,$83,$FF,$07,$E7,$07,$07,$07,$FF,$03,$00
	.byte $00,$07,$04,$10,$00

l_2FF9
		CLC                                ; (2FF9) Clear Carry Flag
		LDY #$00                           ; (2FFA) Load Y with #$00 (0 / 00000000)
		LDA ($FB),Y                        ; (2FFC) Load A with ($FB),Y (251 / 11111011)
		CMP #$28                           ; (2FFE) Subtract #$28 from A (40 / 00101000)
		BCS l_3011                         ; (3000) Branch if Carry Set l_3011
		CMP #$20                           ; (3002) Subtract #$20 from A (32 / 00100000)
		BEQ l_3011                         ; (3004) Branch to l_3011 if Equal
		LDA $FD                            ; (3006) Load A with $FD (253 / 11111101)
		STA $FB                            ; (3008) Store A to $FB (251 / 11111011)
		LDA $FE                            ; (300A) Load A with $FE (254 / 11111110)
		STA $FC                            ; (300C) Store A to $FC (252 / 11111100)
		LDA #$01                           ; (300E) Set A to #$01 (1 / 00000001)
		RTS                                ; (3010) Return from Subroutine


l_3011
		LDA #$00                           ; (3011) Set A to #$00 (0 / 00000000)
		RTS                                ; (3013) Return from Subroutine


l_3014
		LDA $58                            ; (3014) Load A with $58 (88 / 01011000)
		CMP #$FE                           ; (3016) Subtract #$FE from A (254 / 11111110)
		BNE l_3028                         ; (3018) Branch to l_3028 if Not Equal
		SEC                                ; (301A) Set Carry Flag
		LDA $FB                            ; (301B) Load A with $FB (251 / 11111011)
		SBC #$28                           ; (301D) Subtract with Carry #$28 (40 / 00101000)
		STA $FB                            ; (301F) Store A to $FB (251 / 11111011)
		BCS l_3025                         ; (3021) Branch if Carry Set l_3025
		DEC $FC                            ; (3023) Decrement $FC (252 / 11111100)


l_3025
		JMP l_2FF9                         ; (3025) Jump to l_2FF9


l_3028
		CMP #$FD                           ; (3028) Subtract #$FD from A (253 / 11111101)
		BNE l_303C                         ; (302A) Branch to l_303C if Not Equal
		CLC                                ; (302C) Clear Carry Flag
		LDA $FB                            ; (302D) Load A with $FB (251 / 11111011)
		ADC #$28                           ; (302F) Add with Carry with #$28 (40 / 00101000)
		STA $FB                            ; (3031) Store A to $FB (251 / 11111011)
		LDA #$00                           ; (3033) Set A to #$00 (0 / 00000000)
		ADC $FC                            ; (3035) Add with Carry $FC (252 / 11111100)
		STA $FC                            ; (3037) Store A to $FC (252 / 11111100)
		JMP l_2FF9                         ; (3039) Jump to l_2FF9


l_303C
		CMP #$F7                           ; (303C) Subtract #$F7 from A (247 / 11110111)
		BNE l_304E                         ; (303E) Branch to l_304E if Not Equal
		CLC                                ; (3040) Clear Carry Flag
		INC $FB                            ; (3041) Increment Memory $FB (251 / 11111011)
		LDA $FB                            ; (3043) Load A with $FB (251 / 11111011)
		CMP #$00                           ; (3045) Subtract #$00 from A (0 / 00000000)
		BNE l_304B                         ; (3047) Branch to l_304B if Not Equal
		INC $FC                            ; (3049) Increment Memory $FC (252 / 11111100)


l_304B
		JMP l_2FF9                         ; (304B) Jump to l_2FF9


l_304E
		CMP #$FB                           ; (304E) Subtract #$FB from A (251 / 11111011)
		BNE l_3060                         ; (3050) Branch to l_3060 if Not Equal
		SEC                                ; (3052) Set Carry Flag
		DEC $FB                            ; (3053) Decrement $FB (251 / 11111011)
		LDA $FB                            ; (3055) Load A with $FB (251 / 11111011)
		CMP #$FF                           ; (3057) Subtract #$FF from A (255 / 11111111)
		BNE l_305D                         ; (3059) Branch to l_305D if Not Equal
		DEC $FC                            ; (305B) Decrement $FC (252 / 11111100)


l_305D
		JMP l_2FF9                         ; (305D) Jump to l_2FF9


l_3060
		CMP #$EF                           ; (3060) Subtract #$EF from A (239 / 11101111)
		BNE l_306B                         ; (3062) Branch to l_306B if Not Equal
		LDA #$EF                           ; (3064) Set A to #$EF (239 / 11101111)
		STA $57                            ; (3066) Store A to $57 (87 / 01010111)
		LDA #$00                           ; (3068) Set A to #$00 (0 / 00000000)
		RTS                                ; (306A) Return from Subroutine


l_306B
		LDA #$01                           ; (306B) Set A to #$01 (1 / 00000001)
		RTS                                ; (306D) Return from Subroutine


l_306E
		LDA $FB                            ; (306E) Load A with $FB (251 / 11111011)
		STA $FD                            ; (3070) Store A to $FD (253 / 11111101)
		LDA $FC                            ; (3072) Load A with $FC (252 / 11111100)
		STA $FE                            ; (3074) Store A to $FE (254 / 11111110)
		LDA KeyJoy1                        ; (3076) Load A with KeyJoy1 - $DC01. 
		CMP $57                            ; (3079) Subtract $57 from A (87 / 01010111)
		BEQ l_308B                         ; (307B) Branch to l_308B if Equal
		STA $58                            ; (307D) Store A to $58 (88 / 01011000)
		JSR l_3014                         ; (307F) Jump to Subroutine at l_3014
		CMP #$01                           ; (3082) Subtract #$01 from A (1 / 00000001)
		BEQ l_308B                         ; (3084) Branch to l_308B if Equal
		LDA $58                            ; (3086) Load A with $58 (88 / 01011000)
		STA $57                            ; (3088) Store A to $57 (87 / 01010111)
		RTS                                ; (308A) Return from Subroutine


l_308B
		LDA $57                            ; (308B) Load A with $57 (87 / 01010111)
		STA $58                            ; (308D) Store A to $58 (88 / 01011000)
		JSR l_3014                         ; (308F) Jump to Subroutine at l_3014
		CMP #$01                           ; (3092) Subtract #$01 from A (1 / 00000001)
		BEQ l_309B                         ; (3094) Branch to l_309B if Equal
		LDA $58                            ; (3096) Load A with $58 (88 / 01011000)
		STA $57                            ; (3098) Store A to $57 (87 / 01010111)
		RTS                                ; (309A) Return from Subroutine


l_309B
		LDA #$EF                           ; (309B) Set A to #$EF (239 / 11101111)
		STA $57                            ; (309D) Store A to $57 (87 / 01010111)
		RTS                                ; (309F) Return from Subroutine

	.byte $00,$EC

l_30A2
		LDX #$0F                           ; (30A2) Set X to #$0F (15 / 00001111)


l_30A4
		STX $D418                          ; (30A4) Store X to $D418
		STX Voice1PulseWidth2              ; (30A7) Store X to Voice1PulseWidth2 - $D403. 
		LDA #$FA                           ; (30AA) Set A to #$FA (250 / 11111010)
		STA $A2                            ; (30AC) Store A to $A2 (162 / 10100010)


l_30AE
		LDA $A2                            ; (30AE) Load A with $A2 (162 / 10100010)
		BMI l_30AE                         ; (30B0) Branch to l_30AE if minus
		DEX                                ; (30B2) Decrement X
		CPX #$FF                           ; (30B3) Subtract #$FF from X (255 / 11111111)
		BNE l_30A4                         ; (30B5) Branch to l_30A4 if Not Equal
		RTS                                ; (30B7) Return from Subroutine


l_30B8
		LDX #$00                           ; (30B8) Set X to #$00 (0 / 00000000)


l_30BA
		LDA $04FE,X                        ; (30BA) Load A with $04FE,X
		STA l_10F0,X                       ; (30BD) Store A to l_10F0,X
		LDA $054E,X                        ; (30C0) Load A with $054E,X
		STA l_1140,X                       ; (30C3) Store A to l_1140,X
		LDA $059E,X                        ; (30C6) Load A with $059E,X
		STA l_1190,X                       ; (30C9) Store A to l_1190,X
		LDA $05EE,X                        ; (30CC) Load A with $05EE,X
		STA l_11E0,X                       ; (30CF) Store A to l_11E0,X
		LDA $063E,X                        ; (30D2) Load A with $063E,X
		STA l_1230,X                       ; (30D5) Store A to l_1230,X
		INX                                ; (30D8) Increment X
		CPX #$0A                           ; (30D9) Subtract #$0A from X (10 / 00001010)
		BNE l_30BA                         ; (30DB) Branch to l_30BA if Not Equal
		RTS                                ; (30DD) Return from Subroutine


l_30DE
		LDX #$00                           ; (30DE) Set X to #$00 (0 / 00000000)


l_30E0
		LDA $0414,X                        ; (30E0) Load A with $0414,X
		AND #$7F                           ; (30E3) Logical AND with Accumulator and #$7F (127 / 01111111)
		CLC                                ; (30E5) Clear Carry Flag
		CMP l_1234,X                       ; (30E6) Subtract l_1234,X from A
		BEQ l_30EF                         ; (30E9) Branch to l_30EF if Equal
		BCS l_30F5                         ; (30EB) Branch if Carry Set l_30F5
		BCC l_30F4                         ; (30ED) Branch to l_30F4 if Carry Clear


l_30EF
		INX                                ; (30EF) Increment X
		CPX #$05                           ; (30F0) Subtract #$05 from X (5 / 00000101)
		BNE l_30E0                         ; (30F2) Branch to l_30E0 if Not Equal


l_30F4
		RTS                                ; (30F4) Return from Subroutine


l_30F5
		LDX #$00                           ; (30F5) Set X to #$00 (0 / 00000000)


l_30F7
		LDA $0414,X                        ; (30F7) Load A with $0414,X
		AND #$7F                           ; (30FA) Logical AND with Accumulator and #$7F (127 / 01111111)
		STA $0642,X                        ; (30FC) Store A to $0642,X
		INX                                ; (30FF) Increment X
		CPX #$05                           ; (3100) Subtract #$05 from X (5 / 00000101)
		BNE l_30F7                         ; (3102) Branch to l_30F7 if Not Equal
		LDA #$20                           ; (3104) Set A to #$20 (32 / 00100000)
		STA $063E                          ; (3106) Store A to $063E
		STA $063F                          ; (3109) Store A to $063F
		STA $0640                          ; (310C) Store A to $0640
		LDY #$00                           ; (310F) Load Y with #$00 (0 / 00000000)
		LDX #$00                           ; (3111) Set X to #$00 (0 / 00000000)


l_3113
		LDA $06D5,X                        ; (3113) Load A with $06D5,X
		CLC                                ; (3116) Clear Carry Flag
		ADC #$80                           ; (3117) Add with Carry with #$80 (128 / 10000000)
		STA $06D5,X                        ; (3119) Store A to $06D5,X
		LDA #$F6                           ; (311C) Set A to #$F6 (246 / 11110110)
		STA $A2                            ; (311E) Store A to $A2 (162 / 10100010)


l_3120
		LDA $A2                            ; (3120) Load A with $A2 (162 / 10100010)
		BMI l_3120                         ; (3122) Branch to l_3120 if minus
		LDA KeyJoy1                        ; (3124) Load A with KeyJoy1 - $DC01. 
		CMP #$F7                           ; (3127) Subtract #$F7 from A (247 / 11110111)
		BEQ l_3136                         ; (3129) Branch to l_3136 if Equal
		CMP #$FB                           ; (312B) Subtract #$FB from A (251 / 11111011)
		BEQ l_3148                         ; (312D) Branch to l_3148 if Equal
		CMP #$EF                           ; (312F) Subtract #$EF from A (239 / 11101111)
		BEQ l_315A                         ; (3131) Branch to l_315A if Equal
		JMP l_3113                         ; (3133) Jump to l_3113


l_3136
		LDA $06D5,X                        ; (3136) Load A with $06D5,X
		AND #$7F                           ; (3139) Logical AND with Accumulator and #$7F (127 / 01111111)
		STA $06D5,X                        ; (313B) Store A to $06D5,X
		INX                                ; (313E) Increment X
		CPX #$1B                           ; (313F) Subtract #$1B from X (27 / 00011011)
		BNE l_3113                         ; (3141) Branch to l_3113 if Not Equal
		LDX #$00                           ; (3143) Set X to #$00 (0 / 00000000)
		JMP l_3113                         ; (3145) Jump to l_3113


l_3148
		LDA $06D5,X                        ; (3148) Load A with $06D5,X
		AND #$7F                           ; (314B) Logical AND with Accumulator and #$7F (127 / 01111111)
		STA $06D5,X                        ; (314D) Store A to $06D5,X
		DEX                                ; (3150) Decrement X
		CPX #$FF                           ; (3151) Subtract #$FF from X (255 / 11111111)
		BNE l_3113                         ; (3153) Branch to l_3113 if Not Equal
		LDX #$1A                           ; (3155) Set X to #$1A (26 / 00011010)
		JMP l_3113                         ; (3157) Jump to l_3113


l_315A
		LDA $06D5,X                        ; (315A) Load A with $06D5,X
		ORA #$80                           ; (315D) Logical OR with Accumulator and #$80 (128 / 10000000)
		STA $0690,Y                        ; (315F) Store A to $0690,Y
		AND #$7F                           ; (3162) Logical AND with Accumulator and #$7F (127 / 01111111)
		STA $063E,Y                        ; (3164) Store A to $063E,Y
		INY                                ; (3167) Increment Y Register
		STX $FE                            ; (3168) Store X to $FE (254 / 11111110)
		STA Voice1Frequency2               ; (316A) Store A to Voice1Frequency2 - $D401. 
		JSR l_30A2                         ; (316D) Jump to Subroutine at l_30A2
		LDX $FE                            ; (3170) Load X with $FE (254 / 11111110)
		CPY #$03                           ; (3172) Subtract #$03 from Y (3 / 00000011)
		BEQ l_3179                         ; (3174) Branch to l_3179 if Equal
		JMP l_3113                         ; (3176) Jump to l_3113


l_3179
		LDA #$0A                           ; (3179) Set A to #$0A (10 / 00001010)
		STA Voice1Frequency2               ; (317B) Store A to Voice1Frequency2 - $D401. 
		JSR l_30A2                         ; (317E) Jump to Subroutine at l_30A2
		LDX #$00                           ; (3181) Set X to #$00 (0 / 00000000)


l_3183
		CLC                                ; (3183) Clear Carry Flag
		LDA $0642,X                        ; (3184) Load A with $0642,X
		CMP $05F2,X                        ; (3187) Subtract $05F2,X from A
		BEQ l_3190                         ; (318A) Branch to l_3190 if Equal
		BCS l_3198                         ; (318C) Branch if Carry Set l_3198
		BCC l_3195                         ; (318E) Branch to l_3195 if Carry Clear


l_3190
		INX                                ; (3190) Increment X
		CPX #$05                           ; (3191) Subtract #$05 from X (5 / 00000101)
		BNE l_3183                         ; (3193) Branch to l_3183 if Not Equal


l_3195
		JMP l_30B8                         ; (3195) Jump to l_30B8


l_3198
		LDX #$00                           ; (3198) Set X to #$00 (0 / 00000000)


l_319A
		LDA $05EE,X                        ; (319A) Load A with $05EE,X
		PHA                                ; (319D) Push Accumulator to Stack
		LDA $063E,X                        ; (319E) Load A with $063E,X
		STA $05EE,X                        ; (31A1) Store A to $05EE,X
		PLA                                ; (31A4) Pull Accumulator from Stack
		STA $063E,X                        ; (31A5) Store A to $063E,X
		INX                                ; (31A8) Increment X
		CPX #$0A                           ; (31A9) Subtract #$0A from X (10 / 00001010)
		BNE l_319A                         ; (31AB) Branch to l_319A if Not Equal
		LDA #$14                           ; (31AD) Set A to #$14 (20 / 00010100)
		STA Voice1Frequency2               ; (31AF) Store A to Voice1Frequency2 - $D401. 
		JSR l_30A2                         ; (31B2) Jump to Subroutine at l_30A2
		LDX #$00                           ; (31B5) Set X to #$00 (0 / 00000000)


l_31B7
		CLC                                ; (31B7) Clear Carry Flag
		LDA $05F2,X                        ; (31B8) Load A with $05F2,X
		CMP $05A2,X                        ; (31BB) Subtract $05A2,X from A
		BEQ l_31C4                         ; (31BE) Branch to l_31C4 if Equal
		BCS l_31CC                         ; (31C0) Branch if Carry Set l_31CC
		BCC l_31C9                         ; (31C2) Branch to l_31C9 if Carry Clear


l_31C4
		INX                                ; (31C4) Increment X
		CPX #$05                           ; (31C5) Subtract #$05 from X (5 / 00000101)
		BNE l_31B7                         ; (31C7) Branch to l_31B7 if Not Equal


l_31C9
		JMP l_30B8                         ; (31C9) Jump to l_30B8


l_31CC
		LDX #$00                           ; (31CC) Set X to #$00 (0 / 00000000)


l_31CE
		LDA $059E,X                        ; (31CE) Load A with $059E,X
		PHA                                ; (31D1) Push Accumulator to Stack
		LDA $05EE,X                        ; (31D2) Load A with $05EE,X
		STA $059E,X                        ; (31D5) Store A to $059E,X
		PLA                                ; (31D8) Pull Accumulator from Stack
		STA $05EE,X                        ; (31D9) Store A to $05EE,X
		INX                                ; (31DC) Increment X
		CPX #$0A                           ; (31DD) Subtract #$0A from X (10 / 00001010)
		BNE l_31CE                         ; (31DF) Branch to l_31CE if Not Equal
		LDA #$1E                           ; (31E1) Set A to #$1E (30 / 00011110)
		STA Voice1Frequency2               ; (31E3) Store A to Voice1Frequency2 - $D401. 
		JSR l_30A2                         ; (31E6) Jump to Subroutine at l_30A2
		LDX #$00                           ; (31E9) Set X to #$00 (0 / 00000000)


l_31EB
		CLC                                ; (31EB) Clear Carry Flag
		LDA $05A2,X                        ; (31EC) Load A with $05A2,X
		CMP $0552,X                        ; (31EF) Subtract $0552,X from A
		BEQ l_31F8                         ; (31F2) Branch to l_31F8 if Equal
		BCS l_3200                         ; (31F4) Branch if Carry Set l_3200
		BCC l_31FD                         ; (31F6) Branch to l_31FD if Carry Clear


l_31F8
		INX                                ; (31F8) Increment X
		CPX #$05                           ; (31F9) Subtract #$05 from X (5 / 00000101)
		BNE l_31EB                         ; (31FB) Branch to l_31EB if Not Equal


l_31FD
		JMP l_30B8                         ; (31FD) Jump to l_30B8


l_3200
		LDX #$00                           ; (3200) Set X to #$00 (0 / 00000000)


l_3202
		LDA $054E,X                        ; (3202) Load A with $054E,X
		PHA                                ; (3205) Push Accumulator to Stack
		LDA $059E,X                        ; (3206) Load A with $059E,X
		STA $054E,X                        ; (3209) Store A to $054E,X
		PLA                                ; (320C) Pull Accumulator from Stack
		STA $059E,X                        ; (320D) Store A to $059E,X
		INX                                ; (3210) Increment X
		CPX #$0A                           ; (3211) Subtract #$0A from X (10 / 00001010)
		BNE l_3202                         ; (3213) Branch to l_3202 if Not Equal
		LDA #$28                           ; (3215) Set A to #$28 (40 / 00101000)
		STA Voice1Frequency2               ; (3217) Store A to Voice1Frequency2 - $D401. 
		JSR l_30A2                         ; (321A) Jump to Subroutine at l_30A2
		LDX #$00                           ; (321D) Set X to #$00 (0 / 00000000)


l_321F
		CLC                                ; (321F) Clear Carry Flag
		LDA $0552,X                        ; (3220) Load A with $0552,X
		CMP $0502,X                        ; (3223) Subtract $0502,X from A
		BEQ l_322C                         ; (3226) Branch to l_322C if Equal
		BCS l_3234                         ; (3228) Branch if Carry Set l_3234
		BCC l_3231                         ; (322A) Branch to l_3231 if Carry Clear


l_322C
		INX                                ; (322C) Increment X
		CPX #$05                           ; (322D) Subtract #$05 from X (5 / 00000101)
		BNE l_321F                         ; (322F) Branch to l_321F if Not Equal


l_3231
		JMP l_30B8                         ; (3231) Jump to l_30B8


l_3234
		LDX #$00                           ; (3234) Set X to #$00 (0 / 00000000)


l_3236
		LDA $04FE,X                        ; (3236) Load A with $04FE,X
		PHA                                ; (3239) Push Accumulator to Stack
		LDA $054E,X                        ; (323A) Load A with $054E,X
		STA $04FE,X                        ; (323D) Store A to $04FE,X
		PLA                                ; (3240) Pull Accumulator from Stack
		STA $054E,X                        ; (3241) Store A to $054E,X
		INX                                ; (3244) Increment X
		CPX #$0A                           ; (3245) Subtract #$0A from X (10 / 00001010)
		BNE l_3236                         ; (3247) Branch to l_3236 if Not Equal
		LDX #$00                           ; (3249) Set X to #$00 (0 / 00000000)


l_324B
		LDA $0502,X                        ; (324B) Load A with $0502,X
		ORA #$80                           ; (324E) Logical OR with Accumulator and #$80 (128 / 10000000)
		STA l_0FA4,X                       ; (3250) Store A to l_0FA4,X
		INX                                ; (3253) Increment X
		CPX #$05                           ; (3254) Subtract #$05 from X (5 / 00000101)
		BNE l_324B                         ; (3256) Branch to l_324B if Not Equal
		JSR l_23FA                         ; (3258) Jump to Subroutine at l_23FA
		LDA #$50                           ; (325B) Set A to #$50 (80 / 01010000)
		STA Voice1Frequency2               ; (325D) Store A to Voice1Frequency2 - $D401. 
		JSR l_30A2                         ; (3260) Jump to Subroutine at l_30A2
		JMP l_30B8                         ; (3263) Jump to l_30B8


l_3266
		LDA #$06                           ; (3266) Set A to #$06 (6 / 00000110)
		JSR l_240E                         ; (3268) Jump to Subroutine at l_240E
		STA BorderColour                   ; (326B) Store A to BorderColour - $D020. 
		LDA #$C8                           ; (326E) Set A to #$C8 (200 / 11001000)
		STA ScreenControl                  ; (3270) Store A to ScreenControl - $D016. 
		LDA #$0A                           ; (3273) Set A to #$0A (10 / 00001010)
		STA Voice1PulseWidth2              ; (3275) Store A to Voice1PulseWidth2 - $D403. 
		STA Voice1PulseWidth1              ; (3278) Store A to Voice1PulseWidth1 - $D402. 
		JSR l_241C                         ; (327B) Jump to Subroutine at l_241C
		JSR l_2542                         ; (327E) Jump to Subroutine at l_2542
		LDA #$41                           ; (3281) Set A to #$41 (65 / 01000001)
		STA Voice1Control                  ; (3283) Store A to Voice1Control - $D404. 
		JSR l_30DE                         ; (3286) Jump to Subroutine at l_30DE
		LDA #$0A                           ; (3289) Set A to #$0A (10 / 00001010)
		STA Voice1Frequency2               ; (328B) Store A to Voice1Frequency2 - $D401. 
		STA Voice1PulseWidth2              ; (328E) Store A to Voice1PulseWidth2 - $D403. 
		LDA #$0F                           ; (3291) Set A to #$0F (15 / 00001111)
		STA $D418                          ; (3293) Store A to $D418
		LDA #$F6                           ; (3296) Set A to #$F6 (246 / 11110110)
		STA $A2                            ; (3298) Store A to $A2 (162 / 10100010)


l_329A
		LDA $A2                            ; (329A) Load A with $A2 (162 / 10100010)
		BMI l_329A                         ; (329C) Branch to l_329A if minus
		LDX #$00                           ; (329E) Set X to #$00 (0 / 00000000)


l_32A0
		LDA l_26AC,X                       ; (32A0) Load A with l_26AC,X
		STA $0689,X                        ; (32A3) Store A to $0689,X
		INX                                ; (32A6) Increment X
		CPX #$13                           ; (32A7) Subtract #$13 from X (19 / 00010011)
		BNE l_32A0                         ; (32A9) Branch to l_32A0 if Not Equal
		LDA #$1E                           ; (32AB) Set A to #$1E (30 / 00011110)
		STA Voice1Frequency2               ; (32AD) Store A to Voice1Frequency2 - $D401. 
		LDA #$F0                           ; (32B0) Set A to #$F0 (240 / 11110000)
		STA $A2                            ; (32B2) Store A to $A2 (162 / 10100010)


l_32B4
		LDA $A2                            ; (32B4) Load A with $A2 (162 / 10100010)
		BMI l_32B4                         ; (32B6) Branch to l_32B4 if minus
		LDA #$00                           ; (32B8) Set A to #$00 (0 / 00000000)
		STA Voice1Frequency2               ; (32BA) Store A to Voice1Frequency2 - $D401. 
		LDA #$02                           ; (32BD) Set A to #$02 (2 / 00000010)
		JSR l_240E                         ; (32BF) Jump to Subroutine at l_240E
		STA BorderColour                   ; (32C2) Store A to BorderColour - $D020. 


l_32C5
		LDA KeyJoy1                        ; (32C5) Load A with KeyJoy1 - $DC01. 
		CMP #$EF                           ; (32C8) Subtract #$EF from A (239 / 11101111)
		BEQ l_32CF                         ; (32CA) Branch to l_32CF if Equal
		JMP l_32C5                         ; (32CC) Jump to l_32C5


l_32CF
		RTS                                ; (32CF) Return from Subroutine

	.byte $60,$FF

l_32D2
		JMP l_3C93                         ; (32D2) Jump to l_3C93

	.byte $85,$FD,$AD,$87,$26,$85,$FE,$A0,$00,$18,$B1,$FD,$C9,$20,$F0,$07,$C9,$46,$F0,$03,$A9,$01,$60,$A9,$00,$60

l_32EF
		CMP #$01                           ; (32EF) Subtract #$01 from A (1 / 00000001)
		BNE l_3303                         ; (32F1) Branch to l_3303 if Not Equal
		INC l_2686                         ; (32F3) Increment Memory l_2686
		LDA l_2686                         ; (32F6) Load A with l_2686
		CMP #$00                           ; (32F9) Subtract #$00 from A (0 / 00000000)
		BNE l_3300                         ; (32FB) Branch to l_3300 if Not Equal
		INC l_2687                         ; (32FD) Increment Memory l_2687


l_3300
		JMP l_32D2                         ; (3300) Jump to l_32D2


l_3303
		CMP #$02                           ; (3303) Subtract #$02 from A (2 / 00000010)
		BNE l_3317                         ; (3305) Branch to l_3317 if Not Equal
		DEC l_2686                         ; (3307) Decrement l_2686
		LDA l_2686                         ; (330A) Load A with l_2686
		CMP #$FF                           ; (330D) Subtract #$FF from A (255 / 11111111)
		BNE l_3314                         ; (330F) Branch to l_3314 if Not Equal
		DEC l_2687                         ; (3311) Decrement l_2687


l_3314
		JMP l_32D2                         ; (3314) Jump to l_32D2


l_3317
		CMP #$03                           ; (3317) Subtract #$03 from A (3 / 00000011)
		BNE l_332C                         ; (3319) Branch to l_332C if Not Equal
		SEC                                ; (331B) Set Carry Flag
		LDA l_2686                         ; (331C) Load A with l_2686
		SBC #$28                           ; (331F) Subtract with Carry #$28 (40 / 00101000)
		STA l_2686                         ; (3321) Store A to l_2686
		BCS l_3329                         ; (3324) Branch if Carry Set l_3329
		DEC l_2687                         ; (3326) Decrement l_2687


l_3329
		JMP l_32D2                         ; (3329) Jump to l_32D2


l_332C
		CLC                                ; (332C) Clear Carry Flag
		LDA l_2686                         ; (332D) Load A with l_2686
		ADC #$28                           ; (3330) Add with Carry with #$28 (40 / 00101000)
		STA l_2686                         ; (3332) Store A to l_2686
		BCC l_333A                         ; (3335) Branch to l_333A if Carry Clear
		INC l_2687                         ; (3337) Increment Memory l_2687


l_333A
		JMP l_32D2                         ; (333A) Jump to l_32D2


l_333D
		INC l_2680                         ; (333D) Increment Memory l_2680
		LDA l_2680                         ; (3340) Load A with l_2680
		CMP #$05                           ; (3343) Subtract #$05 from A (5 / 00000101)
		BNE l_334C                         ; (3345) Branch to l_334C if Not Equal
		LDA #$01                           ; (3347) Set A to #$01 (1 / 00000001)
		STA l_2680                         ; (3349) Store A to l_2680


l_334C
		RTS                                ; (334C) Return from Subroutine


l_334D
		LDA #$00                           ; (334D) Set A to #$00 (0 / 00000000)
		STA l_2681                         ; (334F) Store A to l_2681
		LDA l_2656                         ; (3352) Load A with l_2656
		STA $FD                            ; (3355) Store A to $FD (253 / 11111101)
		LDA l_2657                         ; (3357) Load A with l_2657
		STA $FE                            ; (335A) Store A to $FE (254 / 11111110)
		LDA #$46                           ; (335C) Set A to #$46 (70 / 01000110)
		LDY #$00                           ; (335E) Load Y with #$00 (0 / 00000000)
		STA ($FD),Y                        ; (3360) Store A to ($FD),Y (253 / 11111101)
		LDX #$0D                           ; (3362) Set X to #$0D (13 / 00001101)


l_3364
		LDA l_2648,X                       ; (3364) Load A with l_2648,X
		STA l_264A,X                       ; (3367) Store A to l_264A,X
		DEX                                ; (336A) Decrement X
		CPX #$FF                           ; (336B) Subtract #$FF from X (255 / 11111111)
		BNE l_3364                         ; (336D) Branch to l_3364 if Not Equal


l_336F
		INC l_2681                         ; (336F) Increment Memory l_2681
		LDA l_2681                         ; (3372) Load A with l_2681
		CMP #$05                           ; (3375) Subtract #$05 from A (5 / 00000101)
		BEQ l_33A4                         ; (3377) Branch to l_33A4 if Equal
		LDA l_2648                         ; (3379) Load A with l_2648
		STA l_2686                         ; (337C) Store A to l_2686
		LDA l_2649                         ; (337F) Load A with l_2649
		STA l_2687                         ; (3382) Store A to l_2687
		JSR l_333D                         ; (3385) Jump to Subroutine at l_333D
		LDA l_2680                         ; (3388) Load A with l_2680
		JSR l_32EF                         ; (338B) Jump to Subroutine at l_32EF
		CMP #$01                           ; (338E) Subtract #$01 from A (1 / 00000001)
		BNE l_3395                         ; (3390) Branch to l_3395 if Not Equal
		JMP l_336F                         ; (3392) Jump to l_336F


l_3395
		LDA l_2686                         ; (3395) Load A with l_2686
		STA l_2648                         ; (3398) Store A to l_2648
		LDA l_2687                         ; (339B) Load A with l_2687
		STA l_2649                         ; (339E) Store A to l_2649
		JMP l_33AE                         ; (33A1) Jump to l_33AE


l_33A4
		LDA #$8E                           ; (33A4) Set A to #$8E (142 / 10001110)
		STA l_2648                         ; (33A6) Store A to l_2648
		LDA #$04                           ; (33A9) Set A to #$04 (4 / 00000100)
		STA l_2649                         ; (33AB) Store A to l_2649


l_33AE
		LDX #$00                           ; (33AE) Set X to #$00 (0 / 00000000)


l_33B0
		LDA l_264A,X                       ; (33B0) Load A with l_264A,X
		STA $FD                            ; (33B3) Store A to $FD (253 / 11111101)
		LDA l_264B,X                       ; (33B5) Load A with l_264B,X
		STA $FE                            ; (33B8) Store A to $FE (254 / 11111110)
		LDA #$44                           ; (33BA) Set A to #$44 (68 / 01000100)
		STA ($FD),Y                        ; (33BC) Store A to ($FD),Y (253 / 11111101)
		INX                                ; (33BE) Increment X
		INX                                ; (33BF) Increment X
		CPX #$0E                           ; (33C0) Subtract #$0E from X (14 / 00001110)
		BNE l_33B0                         ; (33C2) Branch to l_33B0 if Not Equal
		LDA l_2648                         ; (33C4) Load A with l_2648
		STA $FD                            ; (33C7) Store A to $FD (253 / 11111101)
		LDA l_2649                         ; (33C9) Load A with l_2649
		STA $FE                            ; (33CC) Store A to $FE (254 / 11111110)
		LDA #$43                           ; (33CE) Set A to #$43 (67 / 01000011)
		STA ($FD),Y                        ; (33D0) Store A to ($FD),Y (253 / 11111101)


l_33D2
		LDA #$00                           ; (33D2) Set A to #$00 (0 / 00000000)
		STA l_2681                         ; (33D4) Store A to l_2681
		LDA l_2660                         ; (33D7) Load A with l_2660
		STA $FD                            ; (33DA) Store A to $FD (253 / 11111101)
		LDA l_2661                         ; (33DC) Load A with l_2661
		STA $FE                            ; (33DF) Store A to $FE (254 / 11111110)
		LDA #$20                           ; (33E1) Set A to #$20 (32 / 00100000)
		LDY #$00                           ; (33E3) Load Y with #$00 (0 / 00000000)
		STA ($FD),Y                        ; (33E5) Store A to ($FD),Y (253 / 11111101)
		LDX #$07                           ; (33E7) Set X to #$07 (7 / 00000111)


l_33E9
		LDA l_2658,X                       ; (33E9) Load A with l_2658,X
		STA l_265A,X                       ; (33EC) Store A to l_265A,X
		DEX                                ; (33EF) Decrement X
		CPX #$FF                           ; (33F0) Subtract #$FF from X (255 / 11111111)
		BNE l_33E9                         ; (33F2) Branch to l_33E9 if Not Equal


l_33F4
		INC l_2681                         ; (33F4) Increment Memory l_2681
		LDA l_2681                         ; (33F7) Load A with l_2681
		CMP #$05                           ; (33FA) Subtract #$05 from A (5 / 00000101)
		BEQ l_3429                         ; (33FC) Branch to l_3429 if Equal
		LDA l_2658                         ; (33FE) Load A with l_2658
		STA l_2686                         ; (3401) Store A to l_2686
		LDA l_2659                         ; (3404) Load A with l_2659
		STA l_2687                         ; (3407) Store A to l_2687
		JSR l_333D                         ; (340A) Jump to Subroutine at l_333D
		LDA l_2680                         ; (340D) Load A with l_2680
		JSR l_32EF                         ; (3410) Jump to Subroutine at l_32EF
		CMP #$01                           ; (3413) Subtract #$01 from A (1 / 00000001)
		BNE l_341A                         ; (3415) Branch to l_341A if Not Equal
		JMP l_33F4                         ; (3417) Jump to l_33F4


l_341A
		LDA l_2686                         ; (341A) Load A with l_2686
		STA l_2658                         ; (341D) Store A to l_2658
		LDA l_2687                         ; (3420) Load A with l_2687
		STA l_2659                         ; (3423) Store A to l_2659
		JMP l_3433                         ; (3426) Jump to l_3433


l_3429
		LDA #$55                           ; (3429) Set A to #$55 (85 / 01010101)
		STA l_2658                         ; (342B) Store A to l_2658
		LDA #$07                           ; (342E) Set A to #$07 (7 / 00000111)
		STA l_2659                         ; (3430) Store A to l_2659


l_3433
		LDX #$00                           ; (3433) Set X to #$00 (0 / 00000000)


l_3435
		LDA l_265A,X                       ; (3435) Load A with l_265A,X
		STA $FD                            ; (3438) Store A to $FD (253 / 11111101)
		LDA l_265B,X                       ; (343A) Load A with l_265B,X
		STA $FE                            ; (343D) Store A to $FE (254 / 11111110)
		LDA #$44                           ; (343F) Set A to #$44 (68 / 01000100)
		STA ($FD),Y                        ; (3441) Store A to ($FD),Y (253 / 11111101)
		INX                                ; (3443) Increment X
		INX                                ; (3444) Increment X
		CPX #$08                           ; (3445) Subtract #$08 from X (8 / 00001000)
		BNE l_3435                         ; (3447) Branch to l_3435 if Not Equal
		LDA l_2658                         ; (3449) Load A with l_2658
		STA $FD                            ; (344C) Store A to $FD (253 / 11111101)
		LDA l_2659                         ; (344E) Load A with l_2659
		STA $FE                            ; (3451) Store A to $FE (254 / 11111110)
		LDA #$43                           ; (3453) Set A to #$43 (67 / 01000011)
		STA ($FD),Y                        ; (3455) Store A to ($FD),Y (253 / 11111101)


l_3457
		LDA #$00                           ; (3457) Set A to #$00 (0 / 00000000)
		STA l_2681                         ; (3459) Store A to l_2681
		LDA l_266A                         ; (345C) Load A with l_266A
		STA $FD                            ; (345F) Store A to $FD (253 / 11111101)
		LDA l_266B                         ; (3461) Load A with l_266B
		STA $FE                            ; (3464) Store A to $FE (254 / 11111110)
		LDA #$20                           ; (3466) Set A to #$20 (32 / 00100000)
		LDY #$00                           ; (3468) Load Y with #$00 (0 / 00000000)
		STA ($FD),Y                        ; (346A) Store A to ($FD),Y (253 / 11111101)
		LDX #$07                           ; (346C) Set X to #$07 (7 / 00000111)


l_346E
		LDA l_2662,X                       ; (346E) Load A with l_2662,X
		STA l_2664,X                       ; (3471) Store A to l_2664,X
		DEX                                ; (3474) Decrement X
		CPX #$FF                           ; (3475) Subtract #$FF from X (255 / 11111111)
		BNE l_346E                         ; (3477) Branch to l_346E if Not Equal


l_3479
		INC l_2681                         ; (3479) Increment Memory l_2681
		LDA l_2681                         ; (347C) Load A with l_2681
		CMP #$05                           ; (347F) Subtract #$05 from A (5 / 00000101)
		BEQ l_34AE                         ; (3481) Branch to l_34AE if Equal
		LDA l_2662                         ; (3483) Load A with l_2662
		STA l_2686                         ; (3486) Store A to l_2686
		LDA l_2663                         ; (3489) Load A with l_2663
		STA l_2687                         ; (348C) Store A to l_2687
		JSR l_333D                         ; (348F) Jump to Subroutine at l_333D
		LDA l_2680                         ; (3492) Load A with l_2680
		JSR l_32EF                         ; (3495) Jump to Subroutine at l_32EF
		CMP #$01                           ; (3498) Subtract #$01 from A (1 / 00000001)
		BNE l_349F                         ; (349A) Branch to l_349F if Not Equal
		JMP l_3479                         ; (349C) Jump to l_3479


l_349F
		LDA l_2686                         ; (349F) Load A with l_2686
		STA l_2662                         ; (34A2) Store A to l_2662
		LDA l_2687                         ; (34A5) Load A with l_2687
		STA l_2663                         ; (34A8) Store A to l_2663
		JMP l_34B8                         ; (34AB) Jump to l_34B8


l_34AE
		LDA #$CB                           ; (34AE) Set A to #$CB (203 / 11001011)
		STA l_2662                         ; (34B0) Store A to l_2662
		LDA #$04                           ; (34B3) Set A to #$04 (4 / 00000100)
		STA l_2663                         ; (34B5) Store A to l_2663


l_34B8
		LDX #$00                           ; (34B8) Set X to #$00 (0 / 00000000)


l_34BA
		LDA l_2664,X                       ; (34BA) Load A with l_2664,X
		STA $FD                            ; (34BD) Store A to $FD (253 / 11111101)
		LDA l_2665,X                       ; (34BF) Load A with l_2665,X
		STA $FE                            ; (34C2) Store A to $FE (254 / 11111110)
		LDA #$44                           ; (34C4) Set A to #$44 (68 / 01000100)
		STA ($FD),Y                        ; (34C6) Store A to ($FD),Y (253 / 11111101)
		INX                                ; (34C8) Increment X
		INX                                ; (34C9) Increment X
		CPX #$08                           ; (34CA) Subtract #$08 from X (8 / 00001000)
		BNE l_34BA                         ; (34CC) Branch to l_34BA if Not Equal
		LDA l_2662                         ; (34CE) Load A with l_2662
		STA $FD                            ; (34D1) Store A to $FD (253 / 11111101)
		LDA l_2663                         ; (34D3) Load A with l_2663
		STA $FE                            ; (34D6) Store A to $FE (254 / 11111110)
		LDA #$43                           ; (34D8) Set A to #$43 (67 / 01000011)
		STA ($FD),Y                        ; (34DA) Store A to ($FD),Y (253 / 11111101)
		LDA #$00                           ; (34DC) Set A to #$00 (0 / 00000000)
		STA l_2681                         ; (34DE) Store A to l_2681
		LDA l_2674                         ; (34E1) Load A with l_2674
		STA $FD                            ; (34E4) Store A to $FD (253 / 11111101)
		LDA l_2675                         ; (34E6) Load A with l_2675
		STA $FE                            ; (34E9) Store A to $FE (254 / 11111110)
		LDA #$20                           ; (34EB) Set A to #$20 (32 / 00100000)
		LDY #$00                           ; (34ED) Load Y with #$00 (0 / 00000000)
		STA ($FD),Y                        ; (34EF) Store A to ($FD),Y (253 / 11111101)
		LDX #$07                           ; (34F1) Set X to #$07 (7 / 00000111)


l_34F3
		LDA l_266C,X                       ; (34F3) Load A with l_266C,X
		STA l_266E,X                       ; (34F6) Store A to l_266E,X
		DEX                                ; (34F9) Decrement X
		CPX #$FF                           ; (34FA) Subtract #$FF from X (255 / 11111111)
		BNE l_34F3                         ; (34FC) Branch to l_34F3 if Not Equal


l_34FE
		INC l_2681                         ; (34FE) Increment Memory l_2681
		LDA l_2681                         ; (3501) Load A with l_2681
		CMP #$05                           ; (3504) Subtract #$05 from A (5 / 00000101)
		BEQ l_3533                         ; (3506) Branch to l_3533 if Equal
		LDA l_266C                         ; (3508) Load A with l_266C
		STA l_2686                         ; (350B) Store A to l_2686
		LDA l_266D                         ; (350E) Load A with l_266D
		STA l_2687                         ; (3511) Store A to l_2687
		JSR l_333D                         ; (3514) Jump to Subroutine at l_333D
		LDA l_2680                         ; (3517) Load A with l_2680
		JSR l_32EF                         ; (351A) Jump to Subroutine at l_32EF
		CMP #$01                           ; (351D) Subtract #$01 from A (1 / 00000001)
		BNE l_3524                         ; (351F) Branch to l_3524 if Not Equal
		JMP l_34FE                         ; (3521) Jump to l_34FE


l_3524
		LDA l_2686                         ; (3524) Load A with l_2686
		STA l_266C                         ; (3527) Store A to l_266C
		LDA l_2687                         ; (352A) Load A with l_2687
		STA l_266D                         ; (352D) Store A to l_266D
		JMP l_353D                         ; (3530) Jump to l_353D


l_3533
		LDA #$75                           ; (3533) Set A to #$75 (117 / 01110101)
		STA l_266C                         ; (3535) Store A to l_266C
		LDA #$05                           ; (3538) Set A to #$05 (5 / 00000101)
		STA l_266D                         ; (353A) Store A to l_266D


l_353D
		LDX #$00                           ; (353D) Set X to #$00 (0 / 00000000)


l_353F
		LDA l_266E,X                       ; (353F) Load A with l_266E,X
		STA $FD                            ; (3542) Store A to $FD (253 / 11111101)
		LDA l_266F,X                       ; (3544) Load A with l_266F,X
		STA $FE                            ; (3547) Store A to $FE (254 / 11111110)
		LDA #$44                           ; (3549) Set A to #$44 (68 / 01000100)
		STA ($FD),Y                        ; (354B) Store A to ($FD),Y (253 / 11111101)
		INX                                ; (354D) Increment X
		INX                                ; (354E) Increment X
		CPX #$08                           ; (354F) Subtract #$08 from X (8 / 00001000)
		BNE l_353F                         ; (3551) Branch to l_353F if Not Equal
		LDA l_266C                         ; (3553) Load A with l_266C
		STA $FD                            ; (3556) Store A to $FD (253 / 11111101)
		LDA l_266D                         ; (3558) Load A with l_266D
		STA $FE                            ; (355B) Store A to $FE (254 / 11111110)
		LDA #$43                           ; (355D) Set A to #$43 (67 / 01000011)
		STA ($FD),Y                        ; (355F) Store A to ($FD),Y (253 / 11111101)
		LDA #$00                           ; (3561) Set A to #$00 (0 / 00000000)
		STA l_2681                         ; (3563) Store A to l_2681
		LDA l_267E                         ; (3566) Load A with l_267E
		STA $FD                            ; (3569) Store A to $FD (253 / 11111101)
		LDA l_267F                         ; (356B) Load A with l_267F
		STA $FE                            ; (356E) Store A to $FE (254 / 11111110)
		LDA #$46                           ; (3570) Set A to #$46 (70 / 01000110)
		LDY #$00                           ; (3572) Load Y with #$00 (0 / 00000000)
		STA ($FD),Y                        ; (3574) Store A to ($FD),Y (253 / 11111101)
		LDX #$07                           ; (3576) Set X to #$07 (7 / 00000111)


l_3578
		LDA l_2676,X                       ; (3578) Load A with l_2676,X
		STA l_2678,X                       ; (357B) Store A to l_2678,X
		DEX                                ; (357E) Decrement X
		CPX #$FF                           ; (357F) Subtract #$FF from X (255 / 11111111)
		BNE l_3578                         ; (3581) Branch to l_3578 if Not Equal


l_3583
		INC l_2681                         ; (3583) Increment Memory l_2681
		LDA l_2681                         ; (3586) Load A with l_2681
		CMP #$05                           ; (3589) Subtract #$05 from A (5 / 00000101)
		BEQ l_35B8                         ; (358B) Branch to l_35B8 if Equal
		LDA l_2676                         ; (358D) Load A with l_2676
		STA l_2686                         ; (3590) Store A to l_2686
		LDA l_2677                         ; (3593) Load A with l_2677
		STA l_2687                         ; (3596) Store A to l_2687
		JSR l_333D                         ; (3599) Jump to Subroutine at l_333D
		LDA l_2680                         ; (359C) Load A with l_2680
		JSR l_32EF                         ; (359F) Jump to Subroutine at l_32EF
		CMP #$01                           ; (35A2) Subtract #$01 from A (1 / 00000001)
		BNE l_35A9                         ; (35A4) Branch to l_35A9 if Not Equal
		JMP l_3583                         ; (35A6) Jump to l_3583


l_35A9
		LDA l_2686                         ; (35A9) Load A with l_2686
		STA l_2676                         ; (35AC) Store A to l_2676
		LDA l_2687                         ; (35AF) Load A with l_2687
		STA l_2677                         ; (35B2) Store A to l_2677
		JMP l_35C2                         ; (35B5) Jump to l_35C2


l_35B8
		LDA #$FB                           ; (35B8) Set A to #$FB (251 / 11111011)
		STA l_2676                         ; (35BA) Store A to l_2676
		LDA #$06                           ; (35BD) Set A to #$06 (6 / 00000110)
		STA l_2677                         ; (35BF) Store A to l_2677


l_35C2
		LDX #$00                           ; (35C2) Set X to #$00 (0 / 00000000)


l_35C4
		LDA l_2678,X                       ; (35C4) Load A with l_2678,X
		STA $FD                            ; (35C7) Store A to $FD (253 / 11111101)
		LDA l_2679,X                       ; (35C9) Load A with l_2679,X
		STA $FE                            ; (35CC) Store A to $FE (254 / 11111110)
		LDA #$44                           ; (35CE) Set A to #$44 (68 / 01000100)
		STA ($FD),Y                        ; (35D0) Store A to ($FD),Y (253 / 11111101)
		INX                                ; (35D2) Increment X
		INX                                ; (35D3) Increment X
		CPX #$08                           ; (35D4) Subtract #$08 from X (8 / 00001000)
		BNE l_35C4                         ; (35D6) Branch to l_35C4 if Not Equal
		LDA l_2676                         ; (35D8) Load A with l_2676
		STA $FD                            ; (35DB) Store A to $FD (253 / 11111101)
		LDA l_2677                         ; (35DD) Load A with l_2677
		STA $FE                            ; (35E0) Store A to $FE (254 / 11111110)
		LDA #$43                           ; (35E2) Set A to #$43 (67 / 01000011)
		STA ($FD),Y                        ; (35E4) Store A to ($FD),Y (253 / 11111101)
		RTS                                ; (35E6) Return from Subroutine

	.byte $41

l_35E8
		LDY #$01                           ; (35E8) Load Y with #$01 (1 / 00000001)
		LDX #$00                           ; (35EA) Set X to #$00 (0 / 00000000)


l_35EC
		LDA $0450,X                        ; (35EC) Load A with $0450,X
		CMP #$20                           ; (35EF) Subtract #$20 from A (32 / 00100000)
		BEQ l_35FB                         ; (35F1) Branch to l_35FB if Equal
		LDA #$09                           ; (35F3) Set A to #$09 (9 / 00001001)
		STA $D850,X                        ; (35F5) Store A to $D850,X
		JMP l_35FF                         ; (35F8) Jump to l_35FF


l_35FB
		TYA                                ; (35FB) Transfer Y to A
		STA $D850,X                        ; (35FC) Store A to $D850,X


l_35FF
		INY                                ; (35FF) Increment Y Register
		CPY #$08                           ; (3600) Subtract #$08 from Y (8 / 00001000)
		BNE l_3606                         ; (3602) Branch to l_3606 if Not Equal
		LDY #$01                           ; (3604) Load Y with #$01 (1 / 00000001)


l_3606
		INX                                ; (3606) Increment X
		CPX #$FF                           ; (3607) Subtract #$FF from X (255 / 11111111)
		BNE l_35EC                         ; (3609) Branch to l_35EC if Not Equal


l_360B
		LDA $054F,X                        ; (360B) Load A with $054F,X
		CMP #$20                           ; (360E) Subtract #$20 from A (32 / 00100000)
		BEQ l_361A                         ; (3610) Branch to l_361A if Equal
		LDA #$09                           ; (3612) Set A to #$09 (9 / 00001001)
		STA $D94F,X                        ; (3614) Store A to $D94F,X
		JMP l_361E                         ; (3617) Jump to l_361E


l_361A
		TYA                                ; (361A) Transfer Y to A
		STA $D94F,X                        ; (361B) Store A to $D94F,X


l_361E
		INY                                ; (361E) Increment Y Register
		CPY #$08                           ; (361F) Subtract #$08 from Y (8 / 00001000)
		BNE l_3625                         ; (3621) Branch to l_3625 if Not Equal
		LDY #$01                           ; (3623) Load Y with #$01 (1 / 00000001)


l_3625
		INX                                ; (3625) Increment X
		CPX #$FF                           ; (3626) Subtract #$FF from X (255 / 11111111)
		BNE l_360B                         ; (3628) Branch to l_360B if Not Equal


l_362A
		LDA $064E,X                        ; (362A) Load A with $064E,X
		CMP #$20                           ; (362D) Subtract #$20 from A (32 / 00100000)
		BEQ l_3639                         ; (362F) Branch to l_3639 if Equal
		LDA #$09                           ; (3631) Set A to #$09 (9 / 00001001)
		STA $DA4E,X                        ; (3633) Store A to $DA4E,X
		JMP l_363D                         ; (3636) Jump to l_363D


l_3639
		TYA                                ; (3639) Transfer Y to A
		STA $DA4E,X                        ; (363A) Store A to $DA4E,X


l_363D
		INY                                ; (363D) Increment Y Register
		CPY #$08                           ; (363E) Subtract #$08 from Y (8 / 00001000)
		BNE l_3644                         ; (3640) Branch to l_3644 if Not Equal
		LDY #$01                           ; (3642) Load Y with #$01 (1 / 00000001)


l_3644
		INX                                ; (3644) Increment X
		CPX #$FF                           ; (3645) Subtract #$FF from X (255 / 11111111)
		BNE l_362A                         ; (3647) Branch to l_362A if Not Equal


l_3649
		LDA $074D,X                        ; (3649) Load A with $074D,X
		CMP #$20                           ; (364C) Subtract #$20 from A (32 / 00100000)
		BEQ l_3658                         ; (364E) Branch to l_3658 if Equal
		LDA #$09                           ; (3650) Set A to #$09 (9 / 00001001)
		STA $DB4D,X                        ; (3652) Store A to $DB4D,X
		JMP l_365C                         ; (3655) Jump to l_365C


l_3658
		TYA                                ; (3658) Transfer Y to A
		STA $DB4D,X                        ; (3659) Store A to $DB4D,X


l_365C
		INY                                ; (365C) Increment Y Register
		CPY #$08                           ; (365D) Subtract #$08 from Y (8 / 00001000)
		BNE l_3663                         ; (365F) Branch to l_3663 if Not Equal
		LDY #$01                           ; (3661) Load Y with #$01 (1 / 00000001)


l_3663
		INX                                ; (3663) Increment X
		CPX #$4B                           ; (3664) Subtract #$4B from X (75 / 01001011)
		BNE l_3649                         ; (3666) Branch to l_3649 if Not Equal
		RTS                                ; (3668) Return from Subroutine


l_3669
		LDA #$8E                           ; (3669) Set A to #$8E (142 / 10001110)
		STA l_2648                         ; (366B) Store A to l_2648
		STA l_264A                         ; (366E) Store A to l_264A
		STA l_264C                         ; (3671) Store A to l_264C
		STA l_264E                         ; (3674) Store A to l_264E
		STA l_2650                         ; (3677) Store A to l_2650
		STA l_2652                         ; (367A) Store A to l_2652
		STA l_2654                         ; (367D) Store A to l_2654
		STA l_2656                         ; (3680) Store A to l_2656
		LDA #$04                           ; (3683) Set A to #$04 (4 / 00000100)
		STA l_2649                         ; (3685) Store A to l_2649
		STA l_264B                         ; (3688) Store A to l_264B
		STA l_264D                         ; (368B) Store A to l_264D
		STA l_264F                         ; (368E) Store A to l_264F
		STA l_2651                         ; (3691) Store A to l_2651
		STA l_2653                         ; (3694) Store A to l_2653
		STA l_2655                         ; (3697) Store A to l_2655
		STA l_2657                         ; (369A) Store A to l_2657
		STA l_2663                         ; (369D) Store A to l_2663
		STA l_2665                         ; (36A0) Store A to l_2665
		STA l_2667                         ; (36A3) Store A to l_2667
		STA l_2669                         ; (36A6) Store A to l_2669
		STA l_266B                         ; (36A9) Store A to l_266B
		LDA #$55                           ; (36AC) Set A to #$55 (85 / 01010101)
		STA l_2658                         ; (36AE) Store A to l_2658
		STA l_265A                         ; (36B1) Store A to l_265A
		STA l_265C                         ; (36B4) Store A to l_265C
		STA l_265E                         ; (36B7) Store A to l_265E
		STA l_2660                         ; (36BA) Store A to l_2660
		LDA #$07                           ; (36BD) Set A to #$07 (7 / 00000111)
		STA l_2659                         ; (36BF) Store A to l_2659
		STA l_265B                         ; (36C2) Store A to l_265B
		STA l_265D                         ; (36C5) Store A to l_265D
		STA l_265F                         ; (36C8) Store A to l_265F
		STA l_2661                         ; (36CB) Store A to l_2661
		LDA #$CB                           ; (36CE) Set A to #$CB (203 / 11001011)
		STA l_2664                         ; (36D0) Store A to l_2664
		STA l_2662                         ; (36D3) Store A to l_2662
		STA l_2666                         ; (36D6) Store A to l_2666
		STA l_2668                         ; (36D9) Store A to l_2668
		STA l_266A                         ; (36DC) Store A to l_266A
		LDA #$75                           ; (36DF) Set A to #$75 (117 / 01110101)
		STA l_266C                         ; (36E1) Store A to l_266C
		STA l_266E                         ; (36E4) Store A to l_266E
		STA l_2670                         ; (36E7) Store A to l_2670
		STA l_2672                         ; (36EA) Store A to l_2672
		STA l_2674                         ; (36ED) Store A to l_2674
		LDA #$05                           ; (36F0) Set A to #$05 (5 / 00000101)
		STA l_266D                         ; (36F2) Store A to l_266D
		STA l_266F                         ; (36F5) Store A to l_266F
		STA l_2671                         ; (36F8) Store A to l_2671
		STA l_2673                         ; (36FB) Store A to l_2673
		STA l_2675                         ; (36FE) Store A to l_2675
		LDA #$FB                           ; (3701) Set A to #$FB (251 / 11111011)
		STA l_2678                         ; (3703) Store A to l_2678
		STA l_2676                         ; (3706) Store A to l_2676
		STA l_267A                         ; (3709) Store A to l_267A
		STA l_267C                         ; (370C) Store A to l_267C
		STA l_267E                         ; (370F) Store A to l_267E
		LDA #$06                           ; (3712) Set A to #$06 (6 / 00000110)
		STA l_2679                         ; (3714) Store A to l_2679
		STA l_2677                         ; (3717) Store A to l_2677
		STA l_267B                         ; (371A) Store A to l_267B
		STA l_267D                         ; (371D) Store A to l_267D
		STA l_267F                         ; (3720) Store A to l_267F
		RTS                                ; (3723) Return from Subroutine


l_3724
		LDA $0414,X                        ; (3724) Load A with $0414,X
		TAY                                ; (3727) Transfer A to Y
		INY                                ; (3728) Increment Y Register
		CPY #$BA                           ; (3729) Subtract #$BA from Y (186 / 10111010)
		BNE l_3736                         ; (372B) Branch to l_3736 if Not Equal
		LDA #$B0                           ; (372D) Set A to #$B0 (176 / 10110000)
		STA $0414,X                        ; (372F) Store A to $0414,X
		DEX                                ; (3732) Decrement X
		JMP l_3724                         ; (3733) Jump to l_3724


l_3736
		TYA                                ; (3736) Transfer Y to A
		STA $0414,X                        ; (3737) Store A to $0414,X
		RTS                                ; (373A) Return from Subroutine


l_373B
		LDA l_2684                         ; (373B) Load A with l_2684
		CMP #$01                           ; (373E) Subtract #$01 from A (1 / 00000001)
		BNE l_3752                         ; (3740) Branch to l_3752 if Not Equal
		LDA #$0A                           ; (3742) Set A to #$0A (10 / 00001010)
		STA Voice1Frequency2               ; (3744) Store A to Voice1Frequency2 - $D401. 
		LDA #$C8                           ; (3747) Set A to #$C8 (200 / 11001000)
		STA l_268D                         ; (3749) Store A to l_268D
		LDA #$4D                           ; (374C) Set A to #$4D (77 / 01001101)
		STA l_2691                         ; (374E) Store A to l_2691
		RTS                                ; (3751) Return from Subroutine


l_3752
		CMP #$02                           ; (3752) Subtract #$02 from A (2 / 00000010)
		BNE l_376B                         ; (3754) Branch to l_376B if Not Equal
		LDX #$04                           ; (3756) Set X to #$04 (4 / 00000100)
		JSR l_3724                         ; (3758) Jump to Subroutine at l_3724
		LDA #$14                           ; (375B) Set A to #$14 (20 / 00010100)
		STA Voice1Frequency2               ; (375D) Store A to Voice1Frequency2 - $D401. 
		LDA #$4C                           ; (3760) Set A to #$4C (76 / 01001100)
		STA l_2691                         ; (3762) Store A to l_2691
		LDA #$C8                           ; (3765) Set A to #$C8 (200 / 11001000)
		STA l_268D                         ; (3767) Store A to l_268D
		RTS                                ; (376A) Return from Subroutine


l_376B
		LDX #$03                           ; (376B) Set X to #$03 (3 / 00000011)
		JSR l_3724                         ; (376D) Jump to Subroutine at l_3724
		LDA #$5A                           ; (3770) Set A to #$5A (90 / 01011010)
		STA Voice1Frequency2               ; (3772) Store A to Voice1Frequency2 - $D401. 
		LDA #$4B                           ; (3775) Set A to #$4B (75 / 01001011)
		STA l_2691                         ; (3777) Store A to l_2691
		LDA #$C8                           ; (377A) Set A to #$C8 (200 / 11001000)
		STA l_268D                         ; (377C) Store A to l_268D
		RTS                                ; (377F) Return from Subroutine


l_3780
		LDA #$07                           ; (3780) Set A to #$07 (7 / 00000111)
		STA BorderColour                   ; (3782) Store A to BorderColour - $D020. 
		JSR l_240E                         ; (3785) Jump to Subroutine at l_240E
		LDA #$B9                           ; (3788) Set A to #$B9 (185 / 10111001)
		STA $07DE                          ; (378A) Store A to $07DE
		LDX #$00                           ; (378D) Set X to #$00 (0 / 00000000)


l_378F
		LDA $05C5,X                        ; (378F) Load A with $05C5,X
		PHA                                ; (3792) Push Accumulator to Stack
		LDA l_26D4,X                       ; (3793) Load A with l_26D4,X
		STA $05C5,X                        ; (3796) Store A to $05C5,X
		LDA #$0A                           ; (3799) Set A to #$0A (10 / 00001010)
		STA Voice1Frequency2               ; (379B) Store A to Voice1Frequency2 - $D401. 
		LDA #$FF                           ; (379E) Set A to #$FF (255 / 11111111)
		STA $A2                            ; (37A0) Store A to $A2 (162 / 10100010)


l_37A2
		LDA $A2                            ; (37A2) Load A with $A2 (162 / 10100010)
		BMI l_37A2                         ; (37A4) Branch to l_37A2 if minus
		LDA #$14                           ; (37A6) Set A to #$14 (20 / 00010100)
		STA Voice1Frequency2               ; (37A8) Store A to Voice1Frequency2 - $D401. 
		LDA #$FF                           ; (37AB) Set A to #$FF (255 / 11111111)
		STA $A2                            ; (37AD) Store A to $A2 (162 / 10100010)


l_37AF
		LDA $A2                            ; (37AF) Load A with $A2 (162 / 10100010)
		BMI l_37AF                         ; (37B1) Branch to l_37AF if minus
		INX                                ; (37B3) Increment X
		CPX #$09                           ; (37B4) Subtract #$09 from X (9 / 00001001)
		BNE l_378F                         ; (37B6) Branch to l_378F if Not Equal
		LDA #$81                           ; (37B8) Set A to #$81 (129 / 10000001)
		STA $A2                            ; (37BA) Store A to $A2 (162 / 10100010)
		LDA #$00                           ; (37BC) Set A to #$00 (0 / 00000000)
		STA Voice1Frequency2               ; (37BE) Store A to Voice1Frequency2 - $D401. 
		JSR l_3D4B                         ; (37C1) Jump to Subroutine at l_3D4B
		NOP                                ; (37C4) No operation
		LDX #$00                           ; (37C5) Set X to #$00 (0 / 00000000)


l_37C7
		LDA l_26C0,X                       ; (37C7) Load A with l_26C0,X
		STA $05C5,X                        ; (37CA) Store A to $05C5,X
		INX                                ; (37CD) Increment X
		CPX #$09                           ; (37CE) Subtract #$09 from X (9 / 00001001)
		BNE l_37C7                         ; (37D0) Branch to l_37C7 if Not Equal
		LDA #$C8                           ; (37D2) Set A to #$C8 (200 / 11001000)
		STA $A2                            ; (37D4) Store A to $A2 (162 / 10100010)


l_37D6
		LDA $A2                            ; (37D6) Load A with $A2 (162 / 10100010)
		BMI l_37D6                         ; (37D8) Branch to l_37D6 if minus
		LDX #$08                           ; (37DA) Set X to #$08 (8 / 00001000)


l_37DC
		PLA                                ; (37DC) Pull Accumulator from Stack
		STA $05C5,X                        ; (37DD) Store A to $05C5,X
		DEX                                ; (37E0) Decrement X
		CPX #$FF                           ; (37E1) Subtract #$FF from X (255 / 11111111)
		BNE l_37DC                         ; (37E3) Branch to l_37DC if Not Equal
		SEI                                ; (37E5) Set Interrupt Disable Flag
		LDA #$27                           ; (37E6) Set A to #$27 (39 / 00100111)
		STA IRQExecAddr1                   ; (37E8) Store A to IRQExecAddr1 - $0314. 
		LDA #$3D                           ; (37EB) Set A to #$3D (61 / 00111101)
		STA IRQExecAddr2                   ; (37ED) Store A to IRQExecAddr2 - $0315. 
		CLI                                ; (37F0) Clear Interrupt Disable Flag


l_37F1
		JSR l_306E                         ; (37F1) Jump to Subroutine at l_306E
		LDY #$00                           ; (37F4) Load Y with #$00 (0 / 00000000)
		LDA ($FB),Y                        ; (37F6) Load A with ($FB),Y (251 / 11111011)
		CMP #$44                           ; (37F8) Subtract #$44 from A (68 / 01000100)
		BNE l_3809                         ; (37FA) Branch to l_3809 if Not Equal
		LDA #$32                           ; (37FC) Set A to #$32 (50 / 00110010)
		STA Voice1Frequency2               ; (37FE) Store A to Voice1Frequency2 - $D401. 
		LDX #$03                           ; (3801) Set X to #$03 (3 / 00000011)
		JSR l_3724                         ; (3803) Jump to Subroutine at l_3724
		JMP l_382D                         ; (3806) Jump to l_382D


l_3809
		CMP #$43                           ; (3809) Subtract #$43 from A (67 / 01000011)
		BNE l_381F                         ; (380B) Branch to l_381F if Not Equal
		LDA #$46                           ; (380D) Set A to #$46 (70 / 01000110)
		STA Voice1Frequency2               ; (380F) Store A to Voice1Frequency2 - $D401. 
		LDX #$03                           ; (3812) Set X to #$03 (3 / 00000011)
		JSR l_3724                         ; (3814) Jump to Subroutine at l_3724
		LDX #$03                           ; (3817) Set X to #$03 (3 / 00000011)
		JSR l_3724                         ; (3819) Jump to Subroutine at l_3724
		JMP l_382D                         ; (381C) Jump to l_382D


l_381F
		CMP #$46                           ; (381F) Subtract #$46 from A (70 / 01000110)
		BNE l_382D                         ; (3821) Branch to l_382D if Not Equal
		LDA #$05                           ; (3823) Set A to #$05 (5 / 00000101)
		STA Voice1Frequency2               ; (3825) Store A to Voice1Frequency2 - $D401. 
		LDX #$04                           ; (3828) Set X to #$04 (4 / 00000100)
		JSR l_3724                         ; (382A) Jump to Subroutine at l_3724


l_382D
		JSR l_3D5C                         ; (382D) Jump to Subroutine at l_3D5C
		NOP                                ; (3830) No operation
		NOP                                ; (3831) No operation
		NOP                                ; (3832) No operation
		NOP                                ; (3833) No operation
		NOP                                ; (3834) No operation
		LDA l_2689                         ; (3835) Load A with l_2689
		STA $A2                            ; (3838) Store A to $A2 (162 / 10100010)
		LDA $57                            ; (383A) Load A with $57 (87 / 01010111)
		CMP #$EF                           ; (383C) Subtract #$EF from A (239 / 11101111)
		BEQ l_3846                         ; (383E) Branch to l_3846 if Equal
		LDY #$00                           ; (3840) Load Y with #$00 (0 / 00000000)
		LDA #$00                           ; (3842) Set A to #$00 (0 / 00000000)
		STA ($FD),Y                        ; (3844) Store A to ($FD),Y (253 / 11111101)


l_3846
		LDY #$00                           ; (3846) Load Y with #$00 (0 / 00000000)
		LDA #$51                           ; (3848) Set A to #$51 (81 / 01010001)
		STA ($FB),Y                        ; (384A) Store A to ($FB),Y (251 / 11111011)


l_384C
		LDA $07DE                          ; (384C) Load A with $07DE
		CMP #$AF                           ; (384F) Subtract #$AF from A (175 / 10101111)
		BNE l_3856                         ; (3851) Branch to l_3856 if Not Equal
		JMP l_3862                         ; (3853) Jump to l_3862


l_3856
		LDA $A2                            ; (3856) Load A with $A2 (162 / 10100010)
		BMI l_384C                         ; (3858) Branch to l_384C if minus
		LDA #$00                           ; (385A) Set A to #$00 (0 / 00000000)
		STA Voice1Frequency2               ; (385C) Store A to Voice1Frequency2 - $D401. 
		JMP l_37F1                         ; (385F) Jump to l_37F1


l_3862
		JSR l_3D0B                         ; (3862) Jump to Subroutine at l_3D0B
		LDA #$00                           ; (3865) Set A to #$00 (0 / 00000000)
		STA Voice1Frequency2               ; (3867) Store A to Voice1Frequency2 - $D401. 
		STA Voice2Control2                 ; (386A) Store A to Voice2Frequency2 - $D408. 
		LDA #$B0                           ; (386D) Set A to #$B0 (176 / 10110000)
		STA $07DE                          ; (386F) Store A to $07DE
		STA $07DF                          ; (3872) Store A to $07DF
		STA $07E0                          ; (3875) Store A to $07E0
		RTS                                ; (3878) Return from Subroutine


l_3879
		LDA #$00                           ; (3879) Set A to #$00 (0 / 00000000)
		STA Voice1Frequency2               ; (387B) Store A to Voice1Frequency2 - $D401. 
		STA Voice2Control2                 ; (387E) Store A to Voice2Frequency2 - $D408. 
		JSR l_3780                         ; (3881) Jump to Subroutine at l_3780
		INC l_2688                         ; (3884) Increment Memory l_2688
		INC $0424                          ; (3887) Increment Memory $0424
		LDA $0424                          ; (388A) Load A with $0424
		CMP #$BA                           ; (388D) Subtract #$BA from A (186 / 10111010)
		BNE l_389B                         ; (388F) Branch to l_389B if Not Equal
		LDA #$B1                           ; (3891) Set A to #$B1 (177 / 10110001)
		STA $0423                          ; (3893) Store A to $0423
		LDA #$B0                           ; (3896) Set A to #$B0 (176 / 10110000)
		STA $0424                          ; (3898) Store A to $0424


l_389B
		LDA #$00                           ; (389B) Set A to #$00 (0 / 00000000)
		STA l_2690                         ; (389D) Store A to l_2690
		JSR l_3669                         ; (38A0) Jump to Subroutine at l_3669
		LDX #$00                           ; (38A3) Set X to #$00 (0 / 00000000)


l_38A5
		LDA l_26C0,X                       ; (38A5) Load A with l_26C0,X
		STA $05C5,X                        ; (38A8) Store A to $05C5,X
		INX                                ; (38AB) Increment X
		CPX #$09                           ; (38AC) Subtract #$09 from X (9 / 00001001)
		BNE l_38A5                         ; (38AE) Branch to l_38A5 if Not Equal
		LDX #$00                           ; (38B0) Set X to #$00 (0 / 00000000)


l_38B2
		LDA l_3E80,X                       ; (38B2) Load A with l_3E80,X
		STA Voice1Frequency2               ; (38B5) Store A to Voice1Frequency2 - $D401. 
		LDA l_3EE4,X                       ; (38B8) Load A with l_3EE4,X
		STA Voice2Control2                 ; (38BB) Store A to Voice2Frequency2 - $D408. 
		LDA #$F6                           ; (38BE) Set A to #$F6 (246 / 11110110)
		STA $A2                            ; (38C0) Store A to $A2 (162 / 10100010)


l_38C2
		LDA $A2                            ; (38C2) Load A with $A2 (162 / 10100010)
		BMI l_38C2                         ; (38C4) Branch to l_38C2 if minus
		INX                                ; (38C6) Increment X
		CPX #$1E                           ; (38C7) Subtract #$1E from X (30 / 00011110)
		BNE l_38B2                         ; (38C9) Branch to l_38B2 if Not Equal
		LDX #$00                           ; (38CB) Set X to #$00 (0 / 00000000)
		STA Voice2Control2                 ; (38CD) Store A to Voice2Frequency2 - $D408. 


l_38D0
		LDA l_26CA,X                       ; (38D0) Load A with l_26CA,X
		STA $05C5,X                        ; (38D3) Store A to $05C5,X
		LDA #$0A                           ; (38D6) Set A to #$0A (10 / 00001010)
		STA Voice1Frequency2               ; (38D8) Store A to Voice1Frequency2 - $D401. 
		LDA #$01                           ; (38DB) Set A to #$01 (1 / 00000001)
		STA $D9C5,X                        ; (38DD) Store A to $D9C5,X
		LDA #$FF                           ; (38E0) Set A to #$FF (255 / 11111111)
		STA $A2                            ; (38E2) Store A to $A2 (162 / 10100010)


l_38E4
		LDA $A2                            ; (38E4) Load A with $A2 (162 / 10100010)
		BMI l_38E4                         ; (38E6) Branch to l_38E4 if minus
		LDA #$14                           ; (38E8) Set A to #$14 (20 / 00010100)
		STA Voice1Frequency2               ; (38EA) Store A to Voice1Frequency2 - $D401. 
		LDA #$FF                           ; (38ED) Set A to #$FF (255 / 11111111)
		STA $A2                            ; (38EF) Store A to $A2 (162 / 10100010)


l_38F1
		LDA $A2                            ; (38F1) Load A with $A2 (162 / 10100010)
		BMI l_38F1                         ; (38F3) Branch to l_38F1 if minus
		INX                                ; (38F5) Increment X
		CPX #$09                           ; (38F6) Subtract #$09 from X (9 / 00001001)
		BNE l_38D0                         ; (38F8) Branch to l_38D0 if Not Equal
		LDA $0423                          ; (38FA) Load A with $0423
		STA $05CC                          ; (38FD) Store A to $05CC
		LDA $0424                          ; (3900) Load A with $0424
		STA $05CD                          ; (3903) Store A to $05CD
		JSR l_3D76                         ; (3906) Jump to Subroutine at l_3D76
		NOP                                ; (3909) No operation
		NOP                                ; (390A) No operation
		NOP                                ; (390B) No operation
		NOP                                ; (390C) No operation
		NOP                                ; (390D) No operation
		INC l_2682                         ; (390E) Increment Memory l_2682
		LDA l_2682                         ; (3911) Load A with l_2682
		CMP #$04                           ; (3914) Subtract #$04 from A (4 / 00000100)
		BNE l_391D                         ; (3916) Branch to l_391D if Not Equal
		LDA #$01                           ; (3918) Set A to #$01 (1 / 00000001)
		STA l_2682                         ; (391A) Store A to l_2682


l_391D
		CMP #$01                           ; (391D) Subtract #$01 from A (1 / 00000001)
		BNE l_3927                         ; (391F) Branch to l_3927 if Not Equal
		JSR l_246A                         ; (3921) Jump to Subroutine at l_246A
		JMP l_3934                         ; (3924) Jump to l_3934


l_3927
		CMP #$02                           ; (3927) Subtract #$02 from A (2 / 00000010)
		BNE l_3931                         ; (3929) Branch to l_3931 if Not Equal
		JSR l_2491                         ; (392B) Jump to Subroutine at l_2491
		JMP l_3934                         ; (392E) Jump to l_3934


l_3931
		JSR l_24B8                         ; (3931) Jump to Subroutine at l_24B8


l_3934
		JSR l_35E8                         ; (3934) Jump to Subroutine at l_35E8
		LDA #$02                           ; (3937) Set A to #$02 (2 / 00000010)
		STA BorderColour                   ; (3939) Store A to BorderColour - $D020. 
		JSR l_240E                         ; (393C) Jump to Subroutine at l_240E
		LDA #$00                           ; (393F) Set A to #$00 (0 / 00000000)
		STA Voice1Frequency2               ; (3941) Store A to Voice1Frequency2 - $D401. 
		STA l_268F                         ; (3944) Store A to l_268F
		STA l_268D                         ; (3947) Store A to l_268D
		LDA #$FE                           ; (394A) Set A to #$FE (254 / 11111110)
		STA $57                            ; (394C) Store A to $57 (87 / 01010111)
		LDA #$E0                           ; (394E) Set A to #$E0 (224 / 11100000)
		STA $FB                            ; (3950) Store A to $FB (251 / 11111011)
		LDA #$05                           ; (3952) Set A to #$05 (5 / 00000101)
		STA $FC                            ; (3954) Store A to $FC (252 / 11111100)
		LDA #$55                           ; (3956) Set A to #$55 (85 / 01010101)
		STA l_268A                         ; (3958) Store A to l_268A
		LDA #$07                           ; (395B) Set A to #$07 (7 / 00000111)
		STA l_268B                         ; (395D) Store A to l_268B
		RTS                                ; (3960) Return from Subroutine


l_3961
		LDA #$00                           ; (3961) Set A to #$00 (0 / 00000000)
		STA l_2681                         ; (3963) Store A to l_2681
		LDA l_268A                         ; (3966) Load A with l_268A
		STA $FD                            ; (3969) Store A to $FD (253 / 11111101)
		LDA l_268B                         ; (396B) Load A with l_268B
		STA $FE                            ; (396E) Store A to $FE (254 / 11111110)
		LDA #$20                           ; (3970) Set A to #$20 (32 / 00100000)
		LDY #$00                           ; (3972) Load Y with #$00 (0 / 00000000)
		STA ($FD),Y                        ; (3974) Store A to ($FD),Y (253 / 11111101)


l_3976
		INC l_2681                         ; (3976) Increment Memory l_2681
		LDA l_2681                         ; (3979) Load A with l_2681
		CMP #$05                           ; (397C) Subtract #$05 from A (5 / 00000101)
		BEQ l_39AB                         ; (397E) Branch to l_39AB if Equal
		LDA l_268A                         ; (3980) Load A with l_268A
		STA l_2686                         ; (3983) Store A to l_2686
		LDA l_268B                         ; (3986) Load A with l_268B
		STA l_2687                         ; (3989) Store A to l_2687
		JSR l_333D                         ; (398C) Jump to Subroutine at l_333D
		LDA l_2680                         ; (398F) Load A with l_2680
		JSR l_32EF                         ; (3992) Jump to Subroutine at l_32EF
		CMP #$01                           ; (3995) Subtract #$01 from A (1 / 00000001)
		BNE l_399C                         ; (3997) Branch to l_399C if Not Equal
		JMP l_3976                         ; (3999) Jump to l_3976


l_399C
		LDA l_2686                         ; (399C) Load A with l_2686
		STA l_268A                         ; (399F) Store A to l_268A
		LDA l_2687                         ; (39A2) Load A with l_2687
		STA l_268B                         ; (39A5) Store A to l_268B
		JMP l_39B5                         ; (39A8) Jump to l_39B5


l_39AB
		LDA #$55                           ; (39AB) Set A to #$55 (85 / 01010101)
		STA l_268A                         ; (39AD) Store A to l_268A
		LDA #$07                           ; (39B0) Set A to #$07 (7 / 00000111)
		STA l_268B                         ; (39B2) Store A to l_268B


l_39B5
		LDA l_268A                         ; (39B5) Load A with l_268A
		STA $FD                            ; (39B8) Store A to $FD (253 / 11111101)
		LDA l_268B                         ; (39BA) Load A with l_268B
		STA $FE                            ; (39BD) Store A to $FE (254 / 11111110)
		LDA l_268E                         ; (39BF) Load A with l_268E
		LDY #$00                           ; (39C2) Load Y with #$00 (0 / 00000000)
		STA ($FD),Y                        ; (39C4) Store A to ($FD),Y (253 / 11111101)
		INC l_268F                         ; (39C6) Increment Memory l_268F
		LDA l_268F                         ; (39C9) Load A with l_268F
		CMP #$1E                           ; (39CC) Subtract #$1E from A (30 / 00011110)
		BNE l_39D5                         ; (39CE) Branch to l_39D5 if Not Equal
		LDA #$01                           ; (39D0) Set A to #$01 (1 / 00000001)
		STA l_268F                         ; (39D2) Store A to l_268F


l_39D5
		LDX l_268F                         ; (39D5) Load X with l_268F
		LDA l_3E80,X                       ; (39D8) Load A with l_3E80,X
		STA Voice2Control2                 ; (39DB) Store A to Voice2Frequency2 - $D408. 
		RTS                                ; (39DE) Return from Subroutine


l_39DF
		INC l_2684                         ; (39DF) Increment Memory l_2684
		LDA l_2684                         ; (39E2) Load A with l_2684
		CMP #$04                           ; (39E5) Subtract #$04 from A (4 / 00000100)
		BNE l_39EE                         ; (39E7) Branch to l_39EE if Not Equal
		LDA #$01                           ; (39E9) Set A to #$01 (1 / 00000001)
		STA l_2684                         ; (39EB) Store A to l_2684


l_39EE
		LDA l_268D                         ; (39EE) Load A with l_268D
		CMP #$00                           ; (39F1) Subtract #$00 from A (0 / 00000000)
		BNE l_39F8                         ; (39F3) Branch to l_39F8 if Not Equal
		JMP l_3961                         ; (39F5) Jump to l_3961


l_39F8
		DEC l_268D                         ; (39F8) Decrement l_268D
		LDA l_268D                         ; (39FB) Load A with l_268D
		CLC                                ; (39FE) Clear Carry Flag
		CMP #$B4                           ; (39FF) Subtract #$B4 from A (180 / 10110100)
		BCC l_3A15                         ; (3A01) Branch to l_3A15 if Carry Clear
		LDY #$00                           ; (3A03) Load Y with #$00 (0 / 00000000)
		LDA l_268A                         ; (3A05) Load A with l_268A
		STA $FD                            ; (3A08) Store A to $FD (253 / 11111101)
		LDA l_268B                         ; (3A0A) Load A with l_268B
		STA $FE                            ; (3A0D) Store A to $FE (254 / 11111110)
		LDA l_2691                         ; (3A0F) Load A with l_2691
		STA ($FD),Y                        ; (3A12) Store A to ($FD),Y (253 / 11111101)
		RTS                                ; (3A14) Return from Subroutine


l_3A15
		CMP #$AA                           ; (3A15) Subtract #$AA from A (170 / 10101010)
		BNE l_3A45                         ; (3A17) Branch to l_3A45 if Not Equal
		LDA l_268A                         ; (3A19) Load A with l_268A
		STA $FD                            ; (3A1C) Store A to $FD (253 / 11111101)
		LDA l_268B                         ; (3A1E) Load A with l_268B
		STA $FE                            ; (3A21) Store A to $FE (254 / 11111110)
		LDA #$20                           ; (3A23) Set A to #$20 (32 / 00100000)
		LDY #$00                           ; (3A25) Load Y with #$00 (0 / 00000000)
		STA ($FD),Y                        ; (3A27) Store A to ($FD),Y (253 / 11111101)
		LDA #$55                           ; (3A29) Set A to #$55 (85 / 01010101)
		STA l_268A                         ; (3A2B) Store A to l_268A
		LDA #$07                           ; (3A2E) Set A to #$07 (7 / 00000111)
		STA l_268B                         ; (3A30) Store A to l_268B
		INC l_268E                         ; (3A33) Increment Memory l_268E
		INC l_268E                         ; (3A36) Increment Memory l_268E
		LDA l_268E                         ; (3A39) Load A with l_268E
		CMP #$4B                           ; (3A3C) Subtract #$4B from A (75 / 01001011)
		BNE l_3A45                         ; (3A3E) Branch to l_3A45 if Not Equal
		LDA #$47                           ; (3A40) Set A to #$47 (71 / 01000111)
		STA l_268E                         ; (3A42) Store A to l_268E


l_3A45
		RTS                                ; (3A45) Return from Subroutine


l_3A46
		LDA l_2688                         ; (3A46) Load A with l_2688
		CMP #$01                           ; (3A49) Subtract #$01 from A (1 / 00000001)
		BNE l_3A51                         ; (3A4B) Branch to l_3A51 if Not Equal
		JSR l_3457                         ; (3A4D) Jump to Subroutine at l_3457
		RTS                                ; (3A50) Return from Subroutine


l_3A51
		CMP #$02                           ; (3A51) Subtract #$02 from A (2 / 00000010)
		BNE l_3A5C                         ; (3A53) Branch to l_3A5C if Not Equal
		JSR l_3457                         ; (3A55) Jump to Subroutine at l_3457
		JSR l_39DF                         ; (3A58) Jump to Subroutine at l_39DF
		RTS                                ; (3A5B) Return from Subroutine


l_3A5C
		CMP #$03                           ; (3A5C) Subtract #$03 from A (3 / 00000011)
		BNE l_3A67                         ; (3A5E) Branch to l_3A67 if Not Equal
		JSR l_33D2                         ; (3A60) Jump to Subroutine at l_33D2
		JSR l_39DF                         ; (3A63) Jump to Subroutine at l_39DF
		RTS                                ; (3A66) Return from Subroutine


l_3A67
		CMP #$04                           ; (3A67) Subtract #$04 from A (4 / 00000100)
		BNE l_3A72                         ; (3A69) Branch to l_3A72 if Not Equal
		JSR l_334D                         ; (3A6B) Jump to Subroutine at l_334D
		JSR l_39DF                         ; (3A6E) Jump to Subroutine at l_39DF
		RTS                                ; (3A71) Return from Subroutine


l_3A72
		INC l_2689                         ; (3A72) Increment Memory l_2689
		LDA #$01                           ; (3A75) Set A to #$01 (1 / 00000001)
		STA l_2688                         ; (3A77) Store A to l_2688
		JMP l_3A46                         ; (3A7A) Jump to l_3A46


l_3A7D
		LDA #$81                           ; (3A7D) Set A to #$81 (129 / 10000001)
		STA Voice1Control                  ; (3A7F) Store A to Voice1Control - $D404. 
		LDA #$14                           ; (3A82) Set A to #$14 (20 / 00010100)
		STA Voice1Frequency2               ; (3A84) Store A to Voice1Frequency2 - $D401. 
		LDA #$20                           ; (3A87) Set A to #$20 (32 / 00100000)
		LDY #$00                           ; (3A89) Load Y with #$00 (0 / 00000000)
		STA ($FB),Y                        ; (3A8B) Store A to ($FB),Y (251 / 11111011)
		STA ($FD),Y                        ; (3A8D) Store A to ($FD),Y (253 / 11111101)


l_3A8F
		DEC Voice1Frequency2               ; (3A8F) Decrement Voice1Frequency2 - $D401. 
		LDA ($FB),Y                        ; (3A92) Load A with ($FB),Y (251 / 11111011)
		STA $FD                            ; (3A94) Store A to $FD (253 / 11111101)
		LDA #$51                           ; (3A96) Set A to #$51 (81 / 01010001)
		STA ($FB),Y                        ; (3A98) Store A to ($FB),Y (251 / 11111011)
		LDA #$FD                           ; (3A9A) Set A to #$FD (253 / 11111101)
		STA $A2                            ; (3A9C) Store A to $A2 (162 / 10100010)


l_3A9E
		LDA $A2                            ; (3A9E) Load A with $A2 (162 / 10100010)
		BMI l_3A9E                         ; (3AA0) Branch to l_3A9E if minus
		LDA $FD                            ; (3AA2) Load A with $FD (253 / 11111101)
		STA ($FB),Y                        ; (3AA4) Store A to ($FB),Y (251 / 11111011)
		CLC                                ; (3AA6) Clear Carry Flag
		LDA $FB                            ; (3AA7) Load A with $FB (251 / 11111011)
		ADC #$28                           ; (3AA9) Add with Carry with #$28 (40 / 00101000)
		STA $FB                            ; (3AAB) Store A to $FB (251 / 11111011)
		BCC l_3AB1                         ; (3AAD) Branch to l_3AB1 if Carry Clear
		INC $FC                            ; (3AAF) Increment Memory $FC (252 / 11111100)


l_3AB1
		LDA ($FB),Y                        ; (3AB1) Load A with ($FB),Y (251 / 11111011)
		CMP #$A0                           ; (3AB3) Subtract #$A0 from A (160 / 10100000)
		BNE l_3A8F                         ; (3AB5) Branch to l_3A8F if Not Equal
		LDA #$41                           ; (3AB7) Set A to #$41 (65 / 01000001)
		STA Voice1Control                  ; (3AB9) Store A to Voice1Control - $D404. 
		LDA #$00                           ; (3ABC) Set A to #$00 (0 / 00000000)
		STA Voice2Control2                 ; (3ABE) Store A to Voice2Frequency2 - $D408. 
		STA Voice1Frequency2               ; (3AC1) Store A to Voice1Frequency2 - $D401. 
		LDA #$E0                           ; (3AC4) Set A to #$E0 (224 / 11100000)
		STA $FB                            ; (3AC6) Store A to $FB (251 / 11111011)
		STA $FD                            ; (3AC8) Store A to $FD (253 / 11111101)
		LDA #$05                           ; (3ACA) Set A to #$05 (5 / 00000101)
		STA $FC                            ; (3ACC) Store A to $FC (252 / 11111100)
		STA $FE                            ; (3ACE) Store A to $FE (254 / 11111110)
		LDA #$00                           ; (3AD0) Set A to #$00 (0 / 00000000)
		STA ExtraBackgroundColor1          ; (3AD2) Store A to ExtraBackgroundColor1 - $D022. 
		STA ExtraBackgroundColor2          ; (3AD5) Store A to ExtraBackgroundColor2 - $D023. 


l_3AD8
		INC ExtraBackgroundColor1          ; (3AD8) Increment Memory ExtraBackgroundColor1 - $D022. 
		INC ExtraBackgroundColor2          ; (3ADB) Increment Memory ExtraBackgroundColor2 - $D023. 
		LDA #$FF                           ; (3ADE) Set A to #$FF (255 / 11111111)
		STA $A2                            ; (3AE0) Store A to $A2 (162 / 10100010)


l_3AE2
		LDA $A2                            ; (3AE2) Load A with $A2 (162 / 10100010)
		BMI l_3AE2                         ; (3AE4) Branch to l_3AE2 if minus
		JSR l_3C8D                         ; (3AE6) Jump to Subroutine at l_3C8D
		CMP #$0F                           ; (3AE9) Subtract #$0F from A (15 / 00001111)
		BNE l_3AD8                         ; (3AEB) Branch to l_3AD8 if Not Equal
		LDA #$06                           ; (3AED) Set A to #$06 (6 / 00000110)
		STA ExtraBackgroundColor1          ; (3AEF) Store A to ExtraBackgroundColor1 - $D022. 
		STA ExtraBackgroundColor2          ; (3AF2) Store A to ExtraBackgroundColor2 - $D023. 
		LDA #$81                           ; (3AF5) Set A to #$81 (129 / 10000001)
		LDX l_2685                         ; (3AF7) Load X with l_2685
		LDA #$A0                           ; (3AFA) Set A to #$A0 (160 / 10100000)
		STA $07C8,X                        ; (3AFC) Store A to $07C8,X
		LDA #$81                           ; (3AFF) Set A to #$81 (129 / 10000001)
		STA $A2                            ; (3B01) Store A to $A2 (162 / 10100010)


l_3B03
		LDA $A2                            ; (3B03) Load A with $A2 (162 / 10100010)
		BMI l_3B03                         ; (3B05) Branch to l_3B03 if minus
		LDA #$EF                           ; (3B07) Set A to #$EF (239 / 11101111)
		STA $57                            ; (3B09) Store A to $57 (87 / 01010111)
		RTS                                ; (3B0B) Return from Subroutine


l_3B0C
		JSR l_3A7D                         ; (3B0C) Jump to Subroutine at l_3A7D
		LDA #$00                           ; (3B0F) Set A to #$00 (0 / 00000000)
		STA Voice1Frequency2               ; (3B11) Store A to Voice1Frequency2 - $D401. 
		STA Voice2Control2                 ; (3B14) Store A to Voice2Frequency2 - $D408. 
		JSR l_3266                         ; (3B17) Jump to Subroutine at l_3266
		JMP l_3B25                         ; (3B1A) Jump to l_3B25


Sub_PlayerPosition
	;############################################################################################################################
	;# 
	;############################################################################################################################
		JSR l_3D0B                         ; (3B1D) Jump to Subroutine at l_3D0B
		LDA #$1A                           ; (3B20) Set A to #$1A (26 / 00011010)
		STA VIC2MemSetup                   ; (3B22) Store A to VIC2MemSetup - $D018. 


l_3B25
		LDA #$00                           ; (3B25) Set A to #$00 (0 / 00000000)
		STA BackgroundColour               ; (3B27) Store A to BackgroundColour - $D021. 
		STA Voice1Frequency2               ; (3B2A) Store A to Voice1Frequency2 - $D401. 
		STA Voice2Control2                 ; (3B2D) Store A to Voice2Frequency2 - $D408. 
		STA Voice3Control                  ; (3B30) Store A to Voice3Control - $D412. 
		LDA #$88                           ; (3B33) Set A to #$88 (136 / 10001000)
		STA Voice1AttackDecayLength        ; (3B35) Store A to Voice1AttackDecayLength - $D405. 
		STA Voice1SustainVolRelease        ; (3B38) Store A to Voice1SustainVolRelease - $D406. 
		STA Voice2AttackDecayLength        ; (3B3B) Store A to Voice2AttackDecayLength - $D40C. 
		STA Voice2SustainVolRelease        ; (3B3E) Store A to Voice2SustainVolRelease - $D40D. 
		LDA #$41                           ; (3B41) Set A to #$41 (65 / 01000001)
		STA Voice1Control                  ; (3B43) Store A to Voice1Control - $D404. 
		STA Voice2Control                  ; (3B46) Store A to Voice2Control - $D40B. 
		LDA #$0A                           ; (3B49) Set A to #$0A (10 / 00001010)
		STA Voice1PulseWidth2              ; (3B4B) Store A to Voice1PulseWidth2 - $D403. 
		STA Voice1PulseWidth1              ; (3B4E) Store A to Voice1PulseWidth1 - $D402. 
		STA Voice2PulseWidth1              ; (3B51) Store A to Voice2PulseWidth1 - $D409. 
		STA Voice2PulseWidth2              ; (3B54) Store A to Voice2PulseWidth2 - $D40A. 
		LDA #$0F                           ; (3B57) Set A to #$0F (15 / 00001111)
		STA $D418                          ; (3B59) Store A to $D418
		LDA #$06                           ; (3B5C) Set A to #$06 (6 / 00000110)
		STA ExtraBackgroundColor1          ; (3B5E) Store A to ExtraBackgroundColor1 - $D022. 
		STA ExtraBackgroundColor2          ; (3B61) Store A to ExtraBackgroundColor2 - $D023. 
		LDA #$02                           ; (3B64) Set A to #$02 (2 / 00000010)
		STA BorderColour                   ; (3B66) Store A to BorderColour - $D020. 
		JSR l_240E                         ; (3B69) Jump to Subroutine at l_240E
		JSR l_23FA                         ; (3B6C) Jump to Subroutine at l_23FA
		LDA #$C8                           ; (3B6F) Set A to #$C8 (200 / 11001000)
		STA ScreenControl                  ; (3B71) Store A to ScreenControl - $D016. 
		JSR l_2443                         ; (3B74) Jump to Subroutine at l_2443
		JSR l_24DF                         ; (3B77) Jump to Subroutine at l_24DF
		JSR l_3669                         ; (3B7A) Jump to Subroutine at l_3669
		LDA #$E0                           ; (3B7D) Set A to #$E0 (224 / 11100000)
		STA $FB                            ; (3B7F) Store A to $FB (251 / 11111011)
		LDA #$05                           ; (3B81) Set A to #$05 (5 / 00000101)
		STA $FC                            ; (3B83) Store A to $FC (252 / 11111100)
		LDA #$EF                           ; (3B85) Set A to #$EF (239 / 11101111)
		STA $57                            ; (3B87) Store A to $57 (87 / 01010111)
		LDA #$55                           ; (3B89) Set A to #$55 (85 / 01010101)
		STA l_268A                         ; (3B8B) Store A to l_268A
		LDA #$07                           ; (3B8E) Set A to #$07 (7 / 00000111)
		STA l_268B                         ; (3B90) Store A to l_268B
		LDA #$01                           ; (3B93) Set A to #$01 (1 / 00000001)
		STA l_2684                         ; (3B95) Store A to l_2684
		STA l_2688                         ; (3B98) Store A to l_2688
		LDA #$03                           ; (3B9B) Set A to #$03 (3 / 00000011)
		STA l_2685                         ; (3B9D) Store A to l_2685
		LDA #$00                           ; (3BA0) Set A to #$00 (0 / 00000000)
		STA l_2690                         ; (3BA2) Store A to l_2690
		STA l_268D                         ; (3BA5) Store A to l_268D
		LDA #$47                           ; (3BA8) Set A to #$47 (71 / 01000111)
		STA l_268E                         ; (3BAA) Store A to l_268E
		LDA #$FA                           ; (3BAD) Set A to #$FA (250 / 11111010)
		STA l_2689                         ; (3BAF) Store A to l_2689
		LDX #$00                           ; (3BB2) Set X to #$00 (0 / 00000000)


l_3BB4
		LDA l_3E80,X                       ; (3BB4) Load A with l_3E80,X
		STA Voice1Frequency2               ; (3BB7) Store A to Voice1Frequency2 - $D401. 
		LDA l_3EE4,X                       ; (3BBA) Load A with l_3EE4,X
		STA Voice2Control2                 ; (3BBD) Store A to Voice2Frequency2 - $D408. 
		LDA #$F6                           ; (3BC0) Set A to #$F6 (246 / 11110110)
		STA $A2                            ; (3BC2) Store A to $A2 (162 / 10100010)


l_3BC4
		LDA $A2                            ; (3BC4) Load A with $A2 (162 / 10100010)
		BMI l_3BC4                         ; (3BC6) Branch to l_3BC4 if minus
		INX                                ; (3BC8) Increment X
		CPX #$64                           ; (3BC9) Subtract #$64 from X (100 / 01100100)
		BNE l_3BCF                         ; (3BCB) Branch to l_3BCF if Not Equal
		LDX #$00                           ; (3BCD) Set X to #$00 (0 / 00000000)


l_3BCF
		LDA KeyJoy1                        ; (3BCF) Load A with KeyJoy1 - $DC01. 
		CMP #$EF                           ; (3BD2) Subtract #$EF from A (239 / 11101111)
		BNE l_3BB4                         ; (3BD4) Branch to l_3BB4 if Not Equal
		LDA #$00                           ; (3BD6) Set A to #$00 (0 / 00000000)
		STA Voice1Frequency2               ; (3BD8) Store A to Voice1Frequency2 - $D401. 
		STA Voice2Control2                 ; (3BDB) Store A to Voice2Frequency2 - $D408. 
		LDA #$D8                           ; (3BDE) Set A to #$D8 (216 / 11011000)
		STA ScreenControl                  ; (3BE0) Store A to ScreenControl - $D016. 
		JSR l_246A                         ; (3BE3) Jump to Subroutine at l_246A
		LDA #$01                           ; (3BE6) Set A to #$01 (1 / 00000001)
		STA l_2682                         ; (3BE8) Store A to l_2682
		LDA #$B1                           ; (3BEB) Set A to #$B1 (177 / 10110001)
		STA $0424                          ; (3BED) Store A to $0424
		JSR l_35E8                         ; (3BF0) Jump to Subroutine at l_35E8
		JSR l_3669                         ; (3BF3) Jump to Subroutine at l_3669


l_3BF6
		JSR l_3A46                         ; (3BF6) Jump to Subroutine at l_3A46
		JSR l_306E                         ; (3BF9) Jump to Subroutine at l_306E
		LDY #$00                           ; (3BFC) Load Y with #$00 (0 / 00000000)
		LDA ($FB),Y                        ; (3BFE) Load A with ($FB),Y (251 / 11111011)
		CMP #$46                           ; (3C00) Subtract #$46 from A (70 / 01000110)
		BNE l_3C1C                         ; (3C02) Branch to l_3C1C if Not Equal
		LDX #$04                           ; (3C04) Set X to #$04 (4 / 00000100)
		JSR l_3724                         ; (3C06) Jump to Subroutine at l_3724
		INC l_2690                         ; (3C09) Increment Memory l_2690
		LDA l_2690                         ; (3C0C) Load A with l_2690
		STA Voice1Frequency2               ; (3C0F) Store A to Voice1Frequency2 - $D401. 
		CMP #$FF                           ; (3C12) Subtract #$FF from A (255 / 11111111)
		BNE l_3C44                         ; (3C14) Branch to l_3C44 if Not Equal
		JSR l_3879                         ; (3C16) Jump to Subroutine at l_3879
		JMP l_3C44                         ; (3C19) Jump to l_3C44


l_3C1C
		CMP l_268E                         ; (3C1C) Subtract l_268E from A
		BNE l_3C2C                         ; (3C1F) Branch to l_3C2C if Not Equal
		LDA #$14                           ; (3C21) Set A to #$14 (20 / 00010100)
		STA Voice1Frequency2               ; (3C23) Store A to Voice1Frequency2 - $D401. 
		JSR l_373B                         ; (3C26) Jump to Subroutine at l_373B
		JMP l_3C44                         ; (3C29) Jump to l_3C44


l_3C2C
		CMP #$44                           ; (3C2C) Subtract #$44 from A (68 / 01000100)
		BEQ l_3C34                         ; (3C2E) Branch to l_3C34 if Equal
		CMP #$43                           ; (3C30) Subtract #$43 from A (67 / 01000011)
		BNE l_3C44                         ; (3C32) Branch to l_3C44 if Not Equal


l_3C34
		DEC l_2685                         ; (3C34) Decrement l_2685
		LDA l_2685                         ; (3C37) Load A with l_2685
		CMP #$00                           ; (3C3A) Subtract #$00 from A (0 / 00000000)
		BNE l_3C41                         ; (3C3C) Branch to l_3C41 if Not Equal
		JMP l_3B0C                         ; (3C3E) Jump to l_3B0C


l_3C41
		JSR l_3A7D                         ; (3C41) Jump to Subroutine at l_3A7D


l_3C44
		LDY #$00                           ; (3C44) Load Y with #$00 (0 / 00000000)
		LDA $57                            ; (3C46) Load A with $57 (87 / 01010111)
		CMP #$EF                           ; (3C48) Subtract #$EF from A (239 / 11101111)
		BEQ l_3C52                         ; (3C4A) Branch to l_3C52 if Equal
		LDA #$20                           ; (3C4C) Set A to #$20 (32 / 00100000)
		LDY #$00                           ; (3C4E) Load Y with #$00 (0 / 00000000)
		STA ($FD),Y                        ; (3C50) Store A to ($FD),Y (253 / 11111101)


l_3C52
		LDA #$51                           ; (3C52) Set A to #$51 (81 / 01010001)
		STA ($FB),Y                        ; (3C54) Store A to ($FB),Y (251 / 11111011)
		LDA l_2689                         ; (3C56) Load A with l_2689
		STA $A2                            ; (3C59) Store A to $A2 (162 / 10100010)


l_3C5B
		LDA $A2                            ; (3C5B) Load A with $A2 (162 / 10100010)
		BMI l_3C5B                         ; (3C5D) Branch to l_3C5B if minus
		LDA #$00                           ; (3C5F) Set A to #$00 (0 / 00000000)
		STA Voice2Control2                 ; (3C61) Store A to Voice2Frequency2 - $D408. 
		STA Voice1Frequency2               ; (3C64) Store A to Voice1Frequency2 - $D401. 
		LDA $C5                            ; (3C67) Load A with $C5 (197 / 11000101)
		CMP #$04                           ; (3C69) Subtract #$04 from A (4 / 00000100)
		BNE l_3C70                         ; (3C6B) Branch to l_3C70 if Not Equal
		JSR l_3C73                         ; (3C6D) Jump to Subroutine at l_3C73


l_3C70
		JMP l_3BF6                         ; (3C70) Jump to l_3BF6


l_3C73
		LDA #$00                           ; (3C73) Set A to #$00 (0 / 00000000)
		STA $D418                          ; (3C75) Store A to $D418
		LDA #$81                           ; (3C78) Set A to #$81 (129 / 10000001)
		STA $A2                            ; (3C7A) Store A to $A2 (162 / 10100010)


l_3C7C
		LDA $A2                            ; (3C7C) Load A with $A2 (162 / 10100010)
		BMI l_3C7C                         ; (3C7E) Branch to l_3C7C if minus


l_3C80
		LDA KeyJoy1                        ; (3C80) Load A with KeyJoy1 - $DC01. 
		CMP #$EF                           ; (3C83) Subtract #$EF from A (239 / 11101111)
		BNE l_3C80                         ; (3C85) Branch to l_3C80 if Not Equal
		LDA #$0F                           ; (3C87) Set A to #$0F (15 / 00001111)
		STA $D418                          ; (3C89) Store A to $D418
		RTS                                ; (3C8C) Return from Subroutine


l_3C8D
		LDA ExtraBackgroundColor2          ; (3C8D) Load A with ExtraBackgroundColor2 - $D023. 
		AND #$0F                           ; (3C90) Logical AND with Accumulator and #$0F (15 / 00001111)
		RTS                                ; (3C92) Return from Subroutine


l_3C93
		LDA l_2686                         ; (3C93) Load A with l_2686
		STA $FD                            ; (3C96) Store A to $FD (253 / 11111101)
		LDA l_2687                         ; (3C98) Load A with l_2687
		STA $FE                            ; (3C9B) Store A to $FE (254 / 11111110)
		LDY #$00                           ; (3C9D) Load Y with #$00 (0 / 00000000)
		LDA ($FD),Y                        ; (3C9F) Load A with ($FD),Y (253 / 11111101)
		CMP #$20                           ; (3CA1) Subtract #$20 from A (32 / 00100000)
		BEQ l_3CB0                         ; (3CA3) Branch to l_3CB0 if Equal
		CMP #$51                           ; (3CA5) Subtract #$51 from A (81 / 01010001)
		BEQ l_3CB0                         ; (3CA7) Branch to l_3CB0 if Equal
		CMP #$46                           ; (3CA9) Subtract #$46 from A (70 / 01000110)
		BEQ l_3CB0                         ; (3CAB) Branch to l_3CB0 if Equal
		LDA #$01                           ; (3CAD) Set A to #$01 (1 / 00000001)
		RTS                                ; (3CAF) Return from Subroutine


l_3CB0
		LDA #$00                           ; (3CB0) Set A to #$00 (0 / 00000000)
		RTS                                ; (3CB2) Return from Subroutine

	.byte $EE,$83,$26,$AD,$83,$26,$C9,$07,$D0,$4B,$A9,$00,$8D,$83,$26,$A2,$00,$BD,$00,$2A,$48,$BD,$08,$2A,$9D,$00,$2A,$BD,$10,$2A,$9D,$08
	.byte $2A,$68,$9D,$10,$2A,$BD,$38,$2A,$48,$BD,$40,$2A,$9D,$38,$2A,$68,$9D,$40,$2A,$BD,$48,$2A,$48,$BD,$50,$2A,$9D,$48,$2A,$68,$9D,$50
	.byte $2A,$18,$1E,$30,$2A,$A9,$00,$7D,$30,$2A,$9D,$30,$2A,$E8,$E0,$08,$D0,$BF,$20,$08,$25,$4C,$31,$EA

l_3D0B
		SEI                                ; (3D0B) Set Interrupt Disable Flag
		LDA #$B3                           ; (3D0C) Set A to #$B3 (179 / 10110011)
		STA IRQExecAddr1                   ; (3D0E) Store A to IRQExecAddr1 - $0314. 
		LDA #$3C                           ; (3D11) Set A to #$3C (60 / 00111100)
		STA IRQExecAddr2                   ; (3D13) Store A to IRQExecAddr2 - $0315. 
		CLI                                ; (3D16) Clear Interrupt Disable Flag
		RTS                                ; (3D17) Return from Subroutine

	.byte $EA,$EA,$EA,$AD,$03,$D4,$C9,$10,$D0,$05,$A9,$01,$8D,$03,$D4,$CE,$E0,$07,$AD,$E0,$07,$C9,$AF,$D0,$17,$A9,$B9,$8D,$E0,$07,$CE,$DF
	.byte $07,$AD,$DF,$07,$C9,$AF,$D0,$08,$A9,$B9,$8D,$DF,$07,$CE,$DE,$07,$4C,$31,$EA

l_3D4B
		LDA #$81                           ; (3D4B) Set A to #$81 (129 / 10000001)
		STA $A2                            ; (3D4D) Store A to $A2 (162 / 10100010)


l_3D4F
		LDA $A2                            ; (3D4F) Load A with $A2 (162 / 10100010)
		BMI l_3D4F                         ; (3D51) Branch to l_3D4F if minus
		LDA #$00                           ; (3D53) Set A to #$00 (0 / 00000000)
		STA l_2692                         ; (3D55) Store A to l_2692
		STA l_2693                         ; (3D58) Store A to l_2693
		RTS                                ; (3D5B) Return from Subroutine


l_3D5C
		LDX l_2692                         ; (3D5C) Load X with l_2692
		LDA l_3DB8,X                       ; (3D5F) Load A with l_3DB8,X
		STA Voice2Control2                 ; (3D62) Store A to Voice2Frequency2 - $D408. 
		INX                                ; (3D65) Increment X
		CPX #$FF                           ; (3D66) Subtract #$FF from X (255 / 11111111)
		BNE l_3D6C                         ; (3D68) Branch to l_3D6C if Not Equal
		LDX #$00                           ; (3D6A) Set X to #$00 (0 / 00000000)


l_3D6C
		STX l_2692                         ; (3D6C) Store X to l_2692
		RTS                                ; (3D6F) Return from Subroutine

	.byte $92,$26,$8D,$08,$D4,$60

l_3D76
		LDA #$00                           ; (3D76) Set A to #$00 (0 / 00000000)
		STA Voice2Control2                 ; (3D78) Store A to Voice2Frequency2 - $D408. 
		STA Voice1Frequency2               ; (3D7B) Store A to Voice1Frequency2 - $D401. 
		LDA #$81                           ; (3D7E) Set A to #$81 (129 / 10000001)
		STA $A2                            ; (3D80) Store A to $A2 (162 / 10100010)


l_3D82
		LDA $A2                            ; (3D82) Load A with $A2 (162 / 10100010)
		BMI l_3D82                         ; (3D84) Branch to l_3D82 if minus
		RTS                                ; (3D86) Return from Subroutine

	.byte $41,$00,$8E,$7A,$04,$00,$00,$4E,$DF,$00,$9F,$04,$EF,$00,$DF,$04,$FF,$40,$DF,$43,$FF,$4C,$EE,$49,$EF,$4C,$4F,$00,$4F,$4F,$4F,$0C
	.byte $2F,$2F,$2F,$02,$ED,$6C,$27,$4D,$4F,$0F,$FF,$00,$4F,$00,$FF,$00,$EF

l_3DB8

	.byte $0A,$14,$1E,$28,$32,$3C,$46,$50,$5A,$64,$C8,$14,$1E,$28,$32,$3C,$46,$50,$5A,$14,$1E,$28,$32,$3C,$46,$50,$5A,$1E,$28,$32,$3C,$46
	.byte $50,$1E,$28,$32,$3C,$46,$50,$28,$32,$3C,$46,$28,$32,$3C,$46,$32,$3C,$32,$3C,$32,$3C,$32,$28,$1E,$28,$1E,$14,$1E,$0A,$14,$0A,$1E
	.byte $0A,$1E,$0A,$1E,$0A,$1E,$0A,$1E,$0A,$1E,$0A,$1E,$0A,$1E,$0A,$1E,$0A,$1E,$0A,$1E,$0A,$1E,$0A,$1E,$0A,$1E,$0A,$1E,$0A,$1E,$0A,$1E
	.byte $0A,$1E,$0A,$14,$0A,$0B,$0C,$0D,$0E,$0F,$10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1A,$19,$17,$15,$13,$11,$0F,$0D,$0B,$0A,$09,$08
	.byte $09,$08,$07,$08,$07,$08,$06,$07,$06,$07,$05,$06,$05,$06,$04,$05,$02,$01,$0A,$0A,$0A,$0A,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
	.byte $00,$00,$00,$00,$00,$00,$00,$00

l_3E80

	.byte $00,$14,$1E,$28,$32,$3C,$46,$50,$5A,$64,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$14,$1E,$28,$32,$3C,$46,$50,$5A
	.byte $00,$00,$00,$00,$00,$00,$00,$00,$0A,$14,$1E,$28,$32,$3C,$46,$50,$5A,$00,$00,$00,$00,$00,$00,$00,$5A,$50,$46,$3C,$32,$28,$1E,$14
	.byte $0A,$00,$00,$00,$00,$00,$00,$5A,$50,$46,$3C,$32,$28,$1E,$14,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$32,$28,$1E,$14,$0A,$32,$3C
	.byte $46,$50,$5A,$64

l_3EE4

	.byte $0A,$14,$0A,$14,$0A,$14,$0A,$14,$0A,$14,$0A,$14,$0A,$14,$0A,$14,$0A,$14,$0A,$14,$0A,$14,$0A,$14,$0A,$14,$0A,$14,$1E,$14,$1E,$14
	.byte $1E,$14,$1E,$14,$1E,$14,$1E,$14,$1E,$28,$1E,$28,$1E,$28,$1E,$28,$1E,$28,$1E,$28,$1E,$28,$1E,$28,$1E,$32,$28,$32,$28,$32,$28,$32
	.byte $28,$32,$28,$32,$28,$32,$28,$32,$28,$32,$28,$32,$28,$32,$28,$32,$28,$32,$28,$3C,$32,$3C,$32,$3C,$32,$3C,$32,$3C,$32,$3C,$32,$3C
	.byte $32,$3C,$32,$3C,$25